/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Api
{
    using System;
    using System.Collections.Generic;

    using TBAAPI.V3Client.Client;
    using TBAAPI.V3Client.Model;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetDistrictEvents(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictEventsKeys(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetDistrictEventsSimple(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictRanking&gt;</returns>
        List<DistrictRanking> GetDistrictRankings(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
        ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetDistrictTeams(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetDistrictTeamsWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictTeamsKeys(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetDistrictTeamsSimple(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetDistrictTeamsSimpleWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetEventTeams(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetEventTeamsWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventTeamsKeys(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetEventTeamsSimple(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetEventTeamsStatuses(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetEventsByYear(int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetEventsByYearWithHttpInfo(int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventsByYearKeys(int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo(int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetEventsByYearSimple(int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo(int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear(string teamKey, int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetTeams(int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetTeamsWithHttpInfo(int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetTeamsByYear(int year, int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetTeamsByYearWithHttpInfo(int year, int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamsByYearKeys(int year, int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamsByYearKeysWithHttpInfo(int year, int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetTeamsByYearSimple(int year, int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetTeamsByYearSimpleWithHttpInfo(int year, int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamsKeys(int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamsKeysWithHttpInfo(int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetTeamsSimple(int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetTeamsSimpleWithHttpInfo(int pageNum, string ifModifiedSince = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetDistrictEventsAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
        System.Threading.Tasks.Task<List<DistrictRanking>> GetDistrictRankingsAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetDistrictTeamsAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictTeamsKeysAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync(string districtKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync(string eventKey, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetEventsByYearAsync(int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfo(int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventsByYearKeysAsync(int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfo(int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetEventsByYearSimpleAsync(int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfo(int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync(string teamKey, int year, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetTeamsAsync(int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsAsyncWithHttpInfo(int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetTeamsByYearAsync(int year, int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsByYearAsyncWithHttpInfo(int year, int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamsByYearKeysAsync(int year, int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamsByYearKeysAsyncWithHttpInfo(int year, int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsByYearSimpleAsync(int year, int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetTeamsByYearSimpleAsyncWithHttpInfo(int year, int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamsKeysAsync(int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamsKeysAsyncWithHttpInfo(int pageNum, string ifModifiedSince = default);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsSimpleAsync(int pageNum, string ifModifiedSince = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetTeamsSimpleAsyncWithHttpInfo(int pageNum, string ifModifiedSince = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListApi : IListApiSync, IListApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListApi : IListApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListApi(string basePath)
        {
            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TBAAPI.V3Client.Client.Configuration.MergeConfigurations(
                TBAAPI.V3Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ListApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TBAAPI.V3Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetDistrictEvents(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<Event>> localVarResponse = GetDistrictEventsWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEvents");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetDistrictEventsAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<Event>> localVarResponse = await GetDistrictEventsAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEvents");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictEventsKeys(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsKeys");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsKeys");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetDistrictEventsSimple(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<EventSimple>> localVarResponse = GetDistrictEventsSimpleWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsSimple");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<EventSimple>> localVarResponse = await GetDistrictEventsSimpleAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsSimple");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictRanking&gt;</returns>
        public List<DistrictRanking> GetDistrictRankings(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<DistrictRanking>> localVarResponse = GetDistrictRankingsWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
        public ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictRankings");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
        public async System.Threading.Tasks.Task<List<DistrictRanking>> GetDistrictRankingsAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<DistrictRanking>> localVarResponse = await GetDistrictRankingsAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictRankings");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetDistrictTeams(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = GetDistrictTeamsWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> GetDistrictTeamsWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeams");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Team>>("/district/{district_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetDistrictTeamsAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = await GetDistrictTeamsAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeams");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/district/{district_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictTeamsKeys(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = GetDistrictTeamsKeysWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsKeys");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictTeamsKeysAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = await GetDistrictTeamsKeysAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsKeys");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetDistrictTeamsSimple(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = GetDistrictTeamsSimpleWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public ApiResponse<List<TeamSimple>> GetDistrictTeamsSimpleWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsSimple");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamSimple>>("/district/{district_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync(string districtKey, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = await GetDistrictTeamsSimpleAsyncWithHttpInfo(districtKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfo(string districtKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsSimple");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("district_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/district/{district_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetEventTeams(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = GetEventTeamsWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> GetEventTeamsWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeams");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = await GetEventTeamsAsyncWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeams");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventTeamsKeys(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = GetEventTeamsKeysWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsKeys");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = await GetEventTeamsKeysAsyncWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsKeys");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetEventTeamsSimple(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = GetEventTeamsSimpleWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsSimple");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = await GetEventTeamsSimpleAsyncWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsSimple");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetEventTeamsStatuses(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetEventTeamsStatusesWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsStatuses");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync(string eventKey, string ifModifiedSince = default)
        {
            ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetEventTeamsStatusesAsyncWithHttpInfo(eventKey, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsStatuses");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("event_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetEventsByYear(int year, string ifModifiedSince = default)
        {
            ApiResponse<List<Event>> localVarResponse = GetEventsByYearWithHttpInfo(year, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public ApiResponse<List<Event>> GetEventsByYearWithHttpInfo(int year, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetEventsByYearAsync(int year, string ifModifiedSince = default)
        {
            ApiResponse<List<Event>> localVarResponse = await GetEventsByYearAsyncWithHttpInfo(year, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfo(int year, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventsByYearKeys(int year, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = GetEventsByYearKeysWithHttpInfo(year, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo(int year, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventsByYearKeysAsync(int year, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = await GetEventsByYearKeysAsyncWithHttpInfo(year, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfo(int year, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetEventsByYearSimple(int year, string ifModifiedSince = default)
        {
            ApiResponse<List<EventSimple>> localVarResponse = GetEventsByYearSimpleWithHttpInfo(year, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo(int year, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetEventsByYearSimpleAsync(int year, string ifModifiedSince = default)
        {
            ApiResponse<List<EventSimple>> localVarResponse = await GetEventsByYearSimpleAsyncWithHttpInfo(year, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfo(int year, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear(string teamKey, int year, string ifModifiedSince = default)
        {
            ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetTeamEventsStatusesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new ApiException(400, "Missing required parameter 'teamKey' when calling ListApi->GetTeamEventsStatusesByYear");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync(string teamKey, int year, string ifModifiedSince = default)
        {
            ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetTeamEventsStatusesByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new ApiException(400, "Missing required parameter 'teamKey' when calling ListApi->GetTeamEventsStatusesByYear");

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("team_key", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(teamKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetTeams(int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = GetTeamsWithHttpInfo(pageNum, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> GetTeamsWithHttpInfo(int pageNum, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Team>>("/teams/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetTeamsAsync(int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = await GetTeamsAsyncWithHttpInfo(pageNum, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsAsyncWithHttpInfo(int pageNum, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/teams/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetTeamsByYear(int year, int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = GetTeamsByYearWithHttpInfo(year, pageNum, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> GetTeamsByYearWithHttpInfo(int year, int pageNum, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Team>>("/teams/{year}/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetTeamsByYearAsync(int year, int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<Team>> localVarResponse = await GetTeamsByYearAsyncWithHttpInfo(year, pageNum, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetTeamsByYearAsyncWithHttpInfo(int year, int pageNum, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/teams/{year}/{page_num}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYear", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamsByYearKeys(int year, int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = GetTeamsByYearKeysWithHttpInfo(year, pageNum, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetTeamsByYearKeysWithHttpInfo(int year, int pageNum, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/teams/{year}/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamsByYearKeysAsync(int year, int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = await GetTeamsByYearKeysAsyncWithHttpInfo(year, pageNum, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamsByYearKeysAsyncWithHttpInfo(int year, int pageNum, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/teams/{year}/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetTeamsByYearSimple(int year, int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = GetTeamsByYearSimpleWithHttpInfo(year, pageNum, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public ApiResponse<List<TeamSimple>> GetTeamsByYearSimpleWithHttpInfo(int year, int pageNum, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamSimple>>("/teams/{year}/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsByYearSimpleAsync(int year, int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = await GetTeamsByYearSimpleAsyncWithHttpInfo(year, pageNum, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetTeamsByYearSimpleAsyncWithHttpInfo(int year, int pageNum, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("year", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/teams/{year}/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsByYearSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamsKeys(int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = GetTeamsKeysWithHttpInfo(pageNum, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetTeamsKeysWithHttpInfo(int pageNum, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/teams/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamsKeysAsync(int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<string>> localVarResponse = await GetTeamsKeysAsyncWithHttpInfo(pageNum, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamsKeysAsyncWithHttpInfo(int pageNum, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/teams/{page_num}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetTeamsSimple(int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = GetTeamsSimpleWithHttpInfo(pageNum, ifModifiedSince);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public ApiResponse<List<TeamSimple>> GetTeamsSimpleWithHttpInfo(int pageNum, string ifModifiedSince = default)
        {
            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = TBAAPI.V3Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamSimple>>("/teams/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetTeamsSimpleAsync(int pageNum, string ifModifiedSince = default)
        {
            ApiResponse<List<TeamSimple>> localVarResponse = await GetTeamsSimpleAsyncWithHttpInfo(pageNum, ifModifiedSince);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNum">Page number of results to return, zero-indexed</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetTeamsSimpleAsyncWithHttpInfo(int pageNum, string ifModifiedSince = default)
        {

            RequestOptions localVarRequestOptions = new();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.PathParameters.Add("page_num", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(pageNum)); // path parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", TBAAPI.V3Client.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/teams/{page_num}/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}
