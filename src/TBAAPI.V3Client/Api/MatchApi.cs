/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Api;

using System;
using System.Collections.Generic;

using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMatchApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    List<string> GetEventMatchTimeseries(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    List<Match> GetEventMatches(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetEventMatchesWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    List<string> GetEventMatchesKeys(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    List<MatchSimple> GetEventMatchesSimple(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Match</returns>
    Match GetMatch(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Match</returns>
    ApiResponse<Match> GetMatchWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>MatchSimple</returns>
    MatchSimple GetMatchSimple(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of MatchSimple</returns>
    ApiResponse<MatchSimple> GetMatchSimpleWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Object&gt;</returns>
    List<object> GetMatchTimeseries(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Object&gt;</returns>
    ApiResponse<List<object>> GetMatchTimeseriesWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets Zebra MotionWorks data for a Match for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Zebra</returns>
    Zebra GetMatchZebra(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets Zebra MotionWorks data for a Match for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Zebra</returns>
    ApiResponse<Zebra> GetMatchZebraWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    List<Match> GetTeamEventMatches(string teamKey, string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    List<string> GetTeamEventMatchesKeys(string teamKey, string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    List<Match> GetTeamEventMatchesSimple(string teamKey, string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    List<Match> GetTeamMatchesByYear(string teamKey, int year, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetTeamMatchesByYearWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    List<string> GetTeamMatchesByYearKeys(string teamKey, int year, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamMatchesByYearKeysWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    List<MatchSimple> GetTeamMatchesByYearSimple(string teamKey, int year, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    ApiResponse<List<MatchSimple>> GetTeamMatchesByYearSimpleWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMatchApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    System.Threading.Tasks.Task<List<string>> GetEventMatchTimeseriesAsync(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    System.Threading.Tasks.Task<List<Match>> GetEventMatchesAsync(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    System.Threading.Tasks.Task<List<string>> GetEventMatchesKeysAsync(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    System.Threading.Tasks.Task<List<MatchSimple>> GetEventMatchesSimpleAsync(string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Match</returns>
    System.Threading.Tasks.Task<Match> GetMatchAsync(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Match)</returns>
    System.Threading.Tasks.Task<ApiResponse<Match>> GetMatchAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of MatchSimple</returns>
    System.Threading.Tasks.Task<MatchSimple> GetMatchSimpleAsync(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (MatchSimple)</returns>
    System.Threading.Tasks.Task<ApiResponse<MatchSimple>> GetMatchSimpleAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Object&gt;</returns>
    System.Threading.Tasks.Task<List<object>> GetMatchTimeseriesAsync(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<object>>> GetMatchTimeseriesAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets Zebra MotionWorks data for a Match for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Zebra</returns>
    System.Threading.Tasks.Task<Zebra> GetMatchZebraAsync(string matchKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets Zebra MotionWorks data for a Match for the given match key.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Zebra)</returns>
    System.Threading.Tasks.Task<ApiResponse<Zebra>> GetMatchZebraAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync(string teamKey, string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync(string teamKey, string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync(string teamKey, string eventKey, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    System.Threading.Tasks.Task<List<Match>> GetTeamMatchesByYearAsync(string teamKey, int year, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamMatchesByYearAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    System.Threading.Tasks.Task<List<string>> GetTeamMatchesByYearKeysAsync(string teamKey, int year, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamMatchesByYearKeysAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    System.Threading.Tasks.Task<List<MatchSimple>> GetTeamMatchesByYearSimpleAsync(string teamKey, int year, string ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetTeamMatchesByYearSimpleAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default);
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMatchApi : IMatchApiSync, IMatchApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class MatchApi : IMatchApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class.
    /// </summary>
    /// <returns></returns>
    public MatchApi() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class.
    /// </summary>
    /// <returns></returns>
    public MatchApi(string basePath)
    {
        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public MatchApi(Configuration configuration)
    {
        ArgumentNullException.ThrowIfNull(configuration);

        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public MatchApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(asyncClient);
        ArgumentNullException.ThrowIfNull(configuration);

        this.Client = client;
        this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => this.Configuration.BasePath;

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get => _exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1
                ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
                : _exceptionFactory;
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public List<string> GetEventMatchTimeseries(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventMatchTimeseriesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    public async System.Threading.Tasks.Task<List<string>> GetEventMatchTimeseriesAsync(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventMatchTimeseriesAsyncWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public List<Match> GetEventMatches(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetEventMatchesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetEventMatchesWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    public async System.Threading.Tasks.Task<List<Match>> GetEventMatchesAsync(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetEventMatchesAsyncWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public List<string> GetEventMatchesKeys(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventMatchesKeysWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    public async System.Threading.Tasks.Task<List<string>> GetEventMatchesKeysAsync(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventMatchesKeysAsyncWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    public List<MatchSimple> GetEventMatchesSimple(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = GetEventMatchesSimpleWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    public ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<MatchSimple>> localVarResponse = this.Client.Get<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    public async System.Threading.Tasks.Task<List<MatchSimple>> GetEventMatchesSimpleAsync(string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = await GetEventMatchesSimpleAsyncWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfo(string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<MatchSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Match</returns>
    public Match GetMatch(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<Match> localVarResponse = GetMatchWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Match</returns>
    public ApiResponse<Match> GetMatchWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatch");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Match> localVarResponse = this.Client.Get<Match>("/match/{match_key}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatch", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Match</returns>
    public async System.Threading.Tasks.Task<Match> GetMatchAsync(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<Match> localVarResponse = await GetMatchAsyncWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Match)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<Match>> GetMatchAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatch");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Match> localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/match/{match_key}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatch", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>MatchSimple</returns>
    public MatchSimple GetMatchSimple(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<MatchSimple> localVarResponse = GetMatchSimpleWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of MatchSimple</returns>
    public ApiResponse<MatchSimple> GetMatchSimpleWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<MatchSimple> localVarResponse = this.Client.Get<MatchSimple>("/match/{match_key}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatchSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of MatchSimple</returns>
    public async System.Threading.Tasks.Task<MatchSimple> GetMatchSimpleAsync(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<MatchSimple> localVarResponse = await GetMatchSimpleAsyncWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form &#x60;Match&#x60; object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (MatchSimple)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<MatchSimple>> GetMatchSimpleAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<MatchSimple> localVarResponse = await this.AsynchronousClient.GetAsync<MatchSimple>("/match/{match_key}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatchSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Object&gt;</returns>
    public List<object> GetMatchTimeseries(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<List<object>> localVarResponse = GetMatchTimeseriesWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Object&gt;</returns>
    public ApiResponse<List<object>> GetMatchTimeseriesWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<object>> localVarResponse = this.Client.Get<List<object>>("/match/{match_key}/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatchTimeseries", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Object&gt;</returns>
    public async System.Threading.Tasks.Task<List<object>> GetMatchTimeseriesAsync(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<List<object>> localVarResponse = await GetMatchTimeseriesAsyncWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetMatchTimeseriesAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<object>> localVarResponse = await this.AsynchronousClient.GetAsync<List<object>>("/match/{match_key}/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatchTimeseries", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Zebra</returns>
    public Zebra GetMatchZebra(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<Zebra> localVarResponse = GetMatchZebraWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Zebra</returns>
    public ApiResponse<Zebra> GetMatchZebraWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchZebra");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Zebra> localVarResponse = this.Client.Get<Zebra>("/match/{match_key}/zebra_motionworks", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatchZebra", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Zebra</returns>
    public async System.Threading.Tasks.Task<Zebra> GetMatchZebraAsync(string matchKey, string ifModifiedSince = default)
    {
        ApiResponse<Zebra> localVarResponse = await GetMatchZebraAsyncWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg &#x60;2016nytr_qm1&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Zebra)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<Zebra>> GetMatchZebraAsyncWithHttpInfo(string matchKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchZebra");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", ClientUtils.ParameterToString(matchKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Zebra> localVarResponse = await this.AsynchronousClient.GetAsync<Zebra>("/match/{match_key}/zebra_motionworks", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetMatchZebra", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public List<Match> GetTeamEventMatches(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatches");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatches");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public List<string> GetTeamEventMatchesKeys(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamEventMatchesKeysWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    public async System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamEventMatchesKeysAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public List<Match> GetTeamEventMatchesSimple(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesSimpleWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesSimpleAsyncWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo(string teamKey, string eventKey, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", ClientUtils.ParameterToString(eventKey)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public List<Match> GetTeamMatchesByYear(string teamKey, int year, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamMatchesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamMatchesByYearWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/matches/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamMatchesByYear", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    public async System.Threading.Tasks.Task<List<Match>> GetTeamMatchesByYearAsync(string teamKey, int year, string ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamMatchesByYearAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamMatchesByYearAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/matches/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamMatchesByYear", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public List<string> GetTeamMatchesByYearKeys(string teamKey, int year, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamMatchesByYearKeysWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamMatchesByYearKeysWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/matches/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearKeys", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    public async System.Threading.Tasks.Task<List<string>> GetTeamMatchesByYearKeysAsync(string teamKey, int year, string ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamMatchesByYearKeysAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamMatchesByYearKeysAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/matches/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearKeys", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    public List<MatchSimple> GetTeamMatchesByYearSimple(string teamKey, int year, string ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = GetTeamMatchesByYearSimpleWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    public ApiResponse<List<MatchSimple>> GetTeamMatchesByYearSimpleWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<MatchSimple>> localVarResponse = this.Client.Get<List<MatchSimple>>("/team/{team_key}/matches/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    public async System.Threading.Tasks.Task<List<MatchSimple>> GetTeamMatchesByYearSimpleAsync(string teamKey, int year, string ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = await GetTeamMatchesByYearSimpleAsyncWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    public async System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetTeamMatchesByYearSimpleAsyncWithHttpInfo(string teamKey, int year, string ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey == null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", ClientUtils.ParameterToString(teamKey)); // path parameter
        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifModifiedSince != null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<MatchSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/team/{team_key}/matches/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory != null)
        {
            Exception _exception = this.ExceptionFactory("GetTeamMatchesByYearSimple", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
