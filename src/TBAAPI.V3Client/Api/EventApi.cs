/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Api;

using System;
using System.Collections.Generic;
using System.ComponentModel;

using Microsoft.SemanticKernel;

using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IEventApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    IList<Event>? GetDistrictEvents(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetDistrictEventsKeys(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    IList<EventSimple>? GetDistrictEventsSimple(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Event</returns>
    Event GetEvent(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Event</returns>
    ApiResponse<Event> GetEventWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Elimination Alliances for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EliminationAlliance&gt;</returns>
    IList<EliminationAlliance>? GetEventAlliances(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Elimination Alliances for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EliminationAlliance&gt;</returns>
    ApiResponse<List<EliminationAlliance>> GetEventAlliancesWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards from the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Award&gt;</returns>
    IList<Award>? GetEventAwards(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards from the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Award&gt;</returns>
    ApiResponse<List<Award>> GetEventAwardsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventDistrictPoints</returns>
    EventDistrictPoints GetEventDistrictPoints(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventDistrictPoints</returns>
    ApiResponse<EventDistrictPoints> GetEventDistrictPointsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event-specific insights for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventInsights</returns>
    EventInsights GetEventInsights(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event-specific insights for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventInsights</returns>
    ApiResponse<EventInsights> GetEventInsightsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetEventMatchTimeseries(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    IList<Match>? GetEventMatches(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetEventMatchesWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetEventMatchesKeys(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    IList<MatchSimple>? GetEventMatchesSimple(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventOPRs</returns>
    EventOPRs GetEventOPRs(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventOPRs</returns>
    ApiResponse<EventOPRs> GetEventOPRsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Object</returns>
    object GetEventPredictions(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    ApiResponse<object> GetEventPredictionsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventRanking</returns>
    EventRanking GetEventRankings(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventRanking</returns>
    ApiResponse<EventRanking> GetEventRankingsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventSimple</returns>
    EventSimple GetEventSimple(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventSimple</returns>
    ApiResponse<EventSimple> GetEventSimpleWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    IList<Team>? GetEventTeams(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    ApiResponse<List<Team>> GetEventTeamsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetEventTeamsKeys(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    IList<TeamSimple>? GetEventTeamsSimple(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    IDictionary<string, TeamEventStatus>? GetEventTeamsStatuses(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    IList<Event>? GetEventsByYear(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    ApiResponse<List<Event>> GetEventsByYearWithHttpInfo(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetEventsByYearKeys(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    IList<EventSimple>? GetEventsByYearSimple(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards the given team won at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Award&gt;</returns>
    IList<Award>? GetTeamEventAwards(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards the given team won at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Award&gt;</returns>
    ApiResponse<List<Award>> GetTeamEventAwardsWithHttpInfo(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    IList<Match>? GetTeamEventMatches(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetTeamEventMatchesKeys(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    IList<Match>? GetTeamEventMatchesSimple(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets the competition rank and status of the team at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>TeamEventStatus</returns>
    TeamEventStatus GetTeamEventStatus(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets the competition rank and status of the team at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of TeamEventStatus</returns>
    ApiResponse<TeamEventStatus> GetTeamEventStatusWithHttpInfo(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    IList<Event>? GetTeamEvents(string teamKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    ApiResponse<List<Event>> GetTeamEventsWithHttpInfo(string teamKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    IList<Event>? GetTeamEventsByYear(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    ApiResponse<List<Event>> GetTeamEventsByYearWithHttpInfo(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetTeamEventsByYearKeys(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamEventsByYearKeysWithHttpInfo(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    IList<EventSimple>? GetTeamEventsByYearSimple(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    ApiResponse<List<EventSimple>> GetTeamEventsByYearSimpleWithHttpInfo(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetTeamEventsKeys(string teamKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamEventsKeysWithHttpInfo(string teamKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    IList<EventSimple>? GetTeamEventsSimple(string teamKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    ApiResponse<List<EventSimple>> GetTeamEventsSimpleWithHttpInfo(string teamKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    IDictionary<string, TeamEventStatus>? GetTeamEventsStatusesByYear(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo(string teamKey, int year, string? ifModifiedSince = default);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IEventApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    Task<List<Event>> GetDistrictEventsAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetDistrictEventsKeysAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    Task<List<EventSimple>> GetDistrictEventsSimpleAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Event</returns>
    Task<Event> GetEventAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Event)</returns>
    Task<ApiResponse<Event>> GetEventAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Elimination Alliances for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EliminationAlliance&gt;</returns>
    Task<List<EliminationAlliance>> GetEventAlliancesAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Elimination Alliances for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EliminationAlliance&gt;)</returns>
    Task<ApiResponse<List<EliminationAlliance>>> GetEventAlliancesAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards from the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Award&gt;</returns>
    Task<List<Award>> GetEventAwardsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards from the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
    Task<ApiResponse<List<Award>>> GetEventAwardsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventDistrictPoints</returns>
    Task<EventDistrictPoints> GetEventDistrictPointsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
    Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event-specific insights for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventInsights</returns>
    Task<EventInsights> GetEventInsightsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event-specific insights for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventInsights)</returns>
    Task<ApiResponse<EventInsights>> GetEventInsightsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetEventMatchTimeseriesAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    Task<List<Match>> GetEventMatchesAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetEventMatchesKeysAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    Task<List<MatchSimple>> GetEventMatchesSimpleAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventOPRs</returns>
    Task<EventOPRs> GetEventOPRsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventOPRs)</returns>
    Task<ApiResponse<EventOPRs>> GetEventOPRsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Object</returns>
    Task<object> GetEventPredictionsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    Task<ApiResponse<object>> GetEventPredictionsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventRanking</returns>
    Task<EventRanking> GetEventRankingsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team rankings for the Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventRanking)</returns>
    Task<ApiResponse<EventRanking>> GetEventRankingsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventSimple</returns>
    Task<EventSimple> GetEventSimpleAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form Event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventSimple)</returns>
    Task<ApiResponse<EventSimple>> GetEventSimpleAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    Task<List<Team>> GetEventTeamsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetEventTeamsKeysAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    Task<List<TeamSimple>> GetEventTeamsSimpleAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    Task<List<Event>> GetEventsByYearAsync(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfoAsync(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetEventsByYearKeysAsync(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfoAsync(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    Task<List<EventSimple>> GetEventsByYearSimpleAsync(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfoAsync(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards the given team won at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Award&gt;</returns>
    Task<List<Award>> GetTeamEventAwardsAsync(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of awards the given team won at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
    Task<ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfoAsync(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    Task<List<Match>> GetTeamEventMatchesAsync(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfoAsync(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetTeamEventMatchesKeysAsync(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of match keys for matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfoAsync(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    Task<List<Match>> GetTeamEventMatchesSimpleAsync(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of matches for the given team and event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfoAsync(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets the competition rank and status of the team at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of TeamEventStatus</returns>
    Task<TeamEventStatus> GetTeamEventStatusAsync(string teamKey, string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets the competition rank and status of the team at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
    Task<ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfoAsync(string teamKey, string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    Task<List<Event>> GetTeamEventsAsync(string teamKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    Task<ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfoAsync(string teamKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    Task<List<Event>> GetTeamEventsByYearAsync(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    Task<ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfoAsync(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetTeamEventsByYearKeysAsync(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfoAsync(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    Task<ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfoAsync(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetTeamEventsKeysAsync(string teamKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of the event keys for all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfoAsync(string teamKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    Task<List<EventSimple>> GetTeamEventsSimpleAsync(string teamKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of all events this team has competed at.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    Task<ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfoAsync(string teamKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfoAsync(string teamKey, int year, string? ifModifiedSince = default);
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IEventApi : IEventApiSync, IEventApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class EventApi : IEventApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="EventApi"/> class.
    /// </summary>
    /// <returns></returns>
    public EventApi(string basePath)
    {
        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="EventApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public EventApi(Configuration configuration)
    {
        ArgumentNullException.ThrowIfNull(configuration);

        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="EventApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public EventApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(asyncClient);
        ArgumentNullException.ThrowIfNull(configuration);

        this.Client = client;
        this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => this.Configuration.BasePath;

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get => _exceptionFactory.GetInvocationList().Length > 1
                ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
                : _exceptionFactory;
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    public IList<Event>? GetDistrictEvents(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = GetDistrictEventsWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    public ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEvents");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Event>> localVarResponse = this.Client.Get<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    [KernelFunction, Description("Gets a list of events in the given district.")]
    [return: Description("Task of List<Event>")]
    public async Task<List<Event>> GetDistrictEventsAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = await GetDistrictEventsAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    [KernelFunction, Description("Gets a list of events in the given district.")]
    [return: Description("Task of ApiResponse (List<Event>)")]
    public async Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEvents");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Event>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetDistrictEventsKeys(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of event keys for events in the given district.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetDistrictEventsKeysAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of event keys for events in the given district.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    public IList<EventSimple>? GetDistrictEventsSimple(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = GetDistrictEventsSimpleWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    public ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EventSimple>> localVarResponse = this.Client.Get<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given district.")]
    [return: Description("Task of List<EventSimple>")]
    public async Task<List<EventSimple>> GetDistrictEventsSimpleAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = await GetDistrictEventsSimpleAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given district.")]
    [return: Description("Task of ApiResponse (List<EventSimple>)")]
    public async Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EventSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Event</returns>
    public Event GetEvent(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Event> localVarResponse = GetEventWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Event</returns>
    public ApiResponse<Event> GetEventWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEvent");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Event> localVarResponse = this.Client.Get<Event>("/event/{event_key}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEvent", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Event</returns>
    [KernelFunction, Description("Gets an Event.")]
    [return: Description("Task of Event")]
    public async Task<Event> GetEventAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Event> localVarResponse = await GetEventAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Event)</returns>
    [KernelFunction, Description("Gets an Event.")]
    [return: Description("Task of ApiResponse (Event)")]
    public async Task<ApiResponse<Event>> GetEventAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEvent");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Event> localVarResponse = await this.AsynchronousClient.GetAsync<Event>("/event/{event_key}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEvent", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of Elimination Alliances for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EliminationAlliance&gt;</returns>
    public IList<EliminationAlliance>? GetEventAlliances(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EliminationAlliance>> localVarResponse = GetEventAlliancesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of Elimination Alliances for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EliminationAlliance&gt;</returns>
    public ApiResponse<List<EliminationAlliance>> GetEventAlliancesWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAlliances");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EliminationAlliance>> localVarResponse = this.Client.Get<List<EliminationAlliance>>("/event/{event_key}/alliances", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventAlliances", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of Elimination Alliances for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EliminationAlliance&gt;</returns>
    [KernelFunction, Description("Gets a list of Elimination Alliances for the given Event.")]
    [return: Description("Task of List<EliminationAlliance>")]
    public async Task<List<EliminationAlliance>> GetEventAlliancesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EliminationAlliance>> localVarResponse = await GetEventAlliancesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of Elimination Alliances for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EliminationAlliance&gt;)</returns>
    [KernelFunction, Description("Gets a list of Elimination Alliances for the given Event.")]
    [return: Description("Task of ApiResponse (List<EliminationAlliance>)")]
    public async Task<ApiResponse<List<EliminationAlliance>>> GetEventAlliancesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAlliances");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EliminationAlliance>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EliminationAlliance>>("/event/{event_key}/alliances", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventAlliances", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of awards from the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Award&gt;</returns>
    public IList<Award>? GetEventAwards(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Award>> localVarResponse = GetEventAwardsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of awards from the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Award&gt;</returns>
    public ApiResponse<List<Award>> GetEventAwardsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAwards");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Award>> localVarResponse = this.Client.Get<List<Award>>("/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventAwards", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of awards from the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Award&gt;</returns>
    [KernelFunction, Description("Gets a list of awards from the given event.")]
    [return: Description("Task of List<Award>")]
    public async Task<List<Award>> GetEventAwardsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Award>> localVarResponse = await GetEventAwardsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of awards from the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
    [KernelFunction, Description("Gets a list of awards from the given event.")]
    [return: Description("Task of ApiResponse (List<Award>)")]
    public async Task<ApiResponse<List<Award>>> GetEventAwardsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventAwards");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Award>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventAwards", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventDistrictPoints</returns>
    public EventDistrictPoints GetEventDistrictPoints(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventDistrictPoints> localVarResponse = GetEventDistrictPointsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventDistrictPoints</returns>
    public ApiResponse<EventDistrictPoints> GetEventDistrictPointsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventDistrictPoints");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<EventDistrictPoints> localVarResponse = this.Client.Get<EventDistrictPoints>("/event/{event_key}/district_points", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventDistrictPoints", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventDistrictPoints</returns>
    [KernelFunction, Description("Gets a list of team rankings for the Event.")]
    [return: Description("Task of EventDistrictPoints")]
    public async Task<EventDistrictPoints> GetEventDistrictPointsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventDistrictPoints> localVarResponse = await GetEventDistrictPointsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
    [KernelFunction, Description("Gets a list of team rankings for the Event.")]
    [return: Description("Task of ApiResponse (EventDistrictPoints)")]
    public async Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventDistrictPoints");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<EventDistrictPoints> localVarResponse = await this.AsynchronousClient.GetAsync<EventDistrictPoints>("/event/{event_key}/district_points", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventDistrictPoints", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a set of Event-specific insights for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventInsights</returns>
    public EventInsights GetEventInsights(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventInsights> localVarResponse = GetEventInsightsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a set of Event-specific insights for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventInsights</returns>
    public ApiResponse<EventInsights> GetEventInsightsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventInsights");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<EventInsights> localVarResponse = this.Client.Get<EventInsights>("/event/{event_key}/insights", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventInsights", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a set of Event-specific insights for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventInsights</returns>
    [KernelFunction, Description("Gets a set of Event-specific insights for the given Event.")]
    [return: Description("Task of EventInsights")]
    public async Task<EventInsights> GetEventInsightsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventInsights> localVarResponse = await GetEventInsightsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a set of Event-specific insights for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventInsights)</returns>
    [KernelFunction, Description("Gets a set of Event-specific insights for the given Event.")]
    [return: Description("Task of ApiResponse (EventInsights)")]
    public async Task<ApiResponse<EventInsights>> GetEventInsightsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventInsights");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<EventInsights> localVarResponse = await this.AsynchronousClient.GetAsync<EventInsights>("/event/{event_key}/insights", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventInsights", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventMatchTimeseries(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventMatchTimeseriesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetEventMatchTimeseriesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventMatchTimeseriesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetEventMatches(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetEventMatchesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetEventMatchesWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a list of matches for the given event.")]
    [return: Description("Task of List<Match>")]
    public async Task<List<Match>> GetEventMatchesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetEventMatchesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [KernelFunction, Description("Gets a list of matches for the given event.")]
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventMatchesKeys(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventMatchesKeysWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of match keys for the given event.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetEventMatchesKeysAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventMatchesKeysAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of match keys for the given event.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    public IList<MatchSimple>? GetEventMatchesSimple(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = GetEventMatchesSimpleWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    public ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<MatchSimple>> localVarResponse = this.Client.Get<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of matches for the given event.")]
    [return: Description("Task of List<MatchSimple>")]
    public async Task<List<MatchSimple>> GetEventMatchesSimpleAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = await GetEventMatchesSimpleAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of matches for the given event.")]
    [return: Description("Task of ApiResponse (List<MatchSimple>)")]
    public async Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<MatchSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventOPRs</returns>
    public EventOPRs GetEventOPRs(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventOPRs> localVarResponse = GetEventOPRsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventOPRs</returns>
    public ApiResponse<EventOPRs> GetEventOPRsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventOPRs");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<EventOPRs> localVarResponse = this.Client.Get<EventOPRs>("/event/{event_key}/oprs", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventOPRs", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventOPRs</returns>
    [KernelFunction, Description("Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.")]
    [return: Description("Task of EventOPRs")]
    public async Task<EventOPRs> GetEventOPRsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventOPRs> localVarResponse = await GetEventOPRsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventOPRs)</returns>
    [KernelFunction, Description("Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.")]
    [return: Description("Task of ApiResponse (EventOPRs)")]
    public async Task<ApiResponse<EventOPRs>> GetEventOPRsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventOPRs");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<EventOPRs> localVarResponse = await this.AsynchronousClient.GetAsync<EventOPRs>("/event/{event_key}/oprs", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventOPRs", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Object</returns>
    public object GetEventPredictions(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<object> localVarResponse = GetEventPredictionsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public ApiResponse<object> GetEventPredictionsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventPredictions");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<object> localVarResponse = this.Client.Get<object>("/event/{event_key}/predictions", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventPredictions", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Object</returns>
    [KernelFunction, Description("Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.")]
    [return: Description("Task of Object")]
    public async Task<object> GetEventPredictionsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<object> localVarResponse = await GetEventPredictionsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    [KernelFunction, Description("Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.")]
    [return: Description("Task of ApiResponse (Object)")]
    public async Task<ApiResponse<object>> GetEventPredictionsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventPredictions");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<object> localVarResponse = await this.AsynchronousClient.GetAsync<object>("/event/{event_key}/predictions", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventPredictions", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventRanking</returns>
    public EventRanking GetEventRankings(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventRanking> localVarResponse = GetEventRankingsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventRanking</returns>
    public ApiResponse<EventRanking> GetEventRankingsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventRankings");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<EventRanking> localVarResponse = this.Client.Get<EventRanking>("/event/{event_key}/rankings", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventRankings", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventRanking</returns>
    [KernelFunction, Description("Gets a list of team rankings for the Event.")]
    [return: Description("Task of EventRanking")]
    public async Task<EventRanking> GetEventRankingsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventRanking> localVarResponse = await GetEventRankingsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of team rankings for the Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventRanking)</returns>
    [KernelFunction, Description("Gets a list of team rankings for the Event.")]
    [return: Description("Task of ApiResponse (EventRanking)")]
    public async Task<ApiResponse<EventRanking>> GetEventRankingsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventRankings");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<EventRanking> localVarResponse = await this.AsynchronousClient.GetAsync<EventRanking>("/event/{event_key}/rankings", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventRankings", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>EventSimple</returns>
    public EventSimple GetEventSimple(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventSimple> localVarResponse = GetEventSimpleWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of EventSimple</returns>
    public ApiResponse<EventSimple> GetEventSimpleWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<EventSimple> localVarResponse = this.Client.Get<EventSimple>("/event/{event_key}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of EventSimple</returns>
    [KernelFunction, Description("Gets a short-form Event.")]
    [return: Description("Task of EventSimple")]
    public async Task<EventSimple> GetEventSimpleAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<EventSimple> localVarResponse = await GetEventSimpleAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form Event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (EventSimple)</returns>
    [KernelFunction, Description("Gets a short-form Event.")]
    [return: Description("Task of ApiResponse (EventSimple)")]
    public async Task<ApiResponse<EventSimple>> GetEventSimpleAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<EventSimple> localVarResponse = await this.AsynchronousClient.GetAsync<EventSimple>("/event/{event_key}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    public IList<Team>? GetEventTeams(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = GetEventTeamsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    public ApiResponse<List<Team>> GetEventTeamsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeams");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Team>> localVarResponse = this.Client.Get<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of List<Team>")]
    public async Task<List<Team>> GetEventTeamsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = await GetEventTeamsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of ApiResponse (List<Team>)")]
    public async Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeams");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Team>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventTeamsKeys(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventTeamsKeysWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' keys that competed in the given event.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetEventTeamsKeysAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventTeamsKeysAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' keys that competed in the given event.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    public IList<TeamSimple>? GetEventTeamsSimple(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = GetEventTeamsSimpleWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    public ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<TeamSimple>> localVarResponse = this.Client.Get<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of List<TeamSimple>")]
    public async Task<List<TeamSimple>> GetEventTeamsSimpleAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = await GetEventTeamsSimpleAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of ApiResponse (List<TeamSimple>)")]
    public async Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<TeamSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public IDictionary<string, TeamEventStatus>? GetEventTeamsStatuses(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetEventTeamsStatusesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsStatuses");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = this.Client.Get<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for teams competing at the given event.")]
    [return: Description("Task of Dictionary<string, TeamEventStatus>")]
    public async Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetEventTeamsStatusesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for teams competing at the given event.")]
    [return: Description("Task of ApiResponse (Dictionary<string, TeamEventStatus>)")]
    public async Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetEventTeamsStatuses");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    public IList<Event>? GetEventsByYear(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = GetEventsByYearWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    public ApiResponse<List<Event>> GetEventsByYearWithHttpInfo(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Event>> localVarResponse = this.Client.Get<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    [KernelFunction, Description("Gets a list of events in the given year.")]
    [return: Description("Task of List<Event>")]
    public async Task<List<Event>> GetEventsByYearAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = await GetEventsByYearAsyncWithHttpInfoAsync(year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    [KernelFunction, Description("Gets a list of events in the given year.")]
    [return: Description("Task of ApiResponse (List<Event>)")]
    public async Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfoAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Event>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventsByYearKeys(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventsByYearKeysWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of event keys in the given year.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetEventsByYearKeysAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventsByYearKeysAsyncWithHttpInfoAsync(year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of event keys in the given year.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfoAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    public IList<EventSimple>? GetEventsByYearSimple(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = GetEventsByYearSimpleWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    public ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EventSimple>> localVarResponse = this.Client.Get<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given year.")]
    [return: Description("Task of List<EventSimple>")]
    public async Task<List<EventSimple>> GetEventsByYearSimpleAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = await GetEventsByYearSimpleAsyncWithHttpInfoAsync(year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given year.")]
    [return: Description("Task of ApiResponse (List<EventSimple>)")]
    public async Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfoAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EventSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of awards the given team won at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Award&gt;</returns>
    public IList<Award>? GetTeamEventAwards(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Award>> localVarResponse = GetTeamEventAwardsWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of awards the given team won at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Award&gt;</returns>
    public ApiResponse<List<Award>> GetTeamEventAwardsWithHttpInfo(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventAwards");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventAwards");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Award>> localVarResponse = this.Client.Get<List<Award>>("/team/{team_key}/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventAwards", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of awards the given team won at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Award&gt;</returns>
    [KernelFunction, Description("Gets a list of awards the given team won at the given event.")]
    [return: Description("Task of List<Award>")]
    public async Task<List<Award>> GetTeamEventAwardsAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Award>> localVarResponse = await GetTeamEventAwardsAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of awards the given team won at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
    [KernelFunction, Description("Gets a list of awards the given team won at the given event.")]
    [return: Description("Task of ApiResponse (List<Award>)")]
    public async Task<ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventAwards");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventAwards");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Award>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Award>>("/team/{team_key}/event/{event_key}/awards", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventAwards", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetTeamEventMatches(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatches");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a list of matches for the given team and event.")]
    [return: Description("Task of List<Match>")]
    public async Task<List<Match>> GetTeamEventMatchesAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [KernelFunction, Description("Gets a list of matches for the given team and event.")]
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatches");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamEventMatchesKeys(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamEventMatchesKeysWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesKeys");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of match keys for matches for the given team and event.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetTeamEventMatchesKeysAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamEventMatchesKeysAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of match keys for matches for the given team and event.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesKeys");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetTeamEventMatchesSimple(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesSimpleWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesSimple");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of matches for the given team and event.")]
    [return: Description("Task of List<Match>")]
    public async Task<List<Match>> GetTeamEventMatchesSimpleAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesSimpleAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of matches for the given team and event.")]
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventMatchesSimple");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets the competition rank and status of the team at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>TeamEventStatus</returns>
    public TeamEventStatus GetTeamEventStatus(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<TeamEventStatus> localVarResponse = GetTeamEventStatusWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets the competition rank and status of the team at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of TeamEventStatus</returns>
    public ApiResponse<TeamEventStatus> GetTeamEventStatusWithHttpInfo(string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventStatus");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventStatus");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<TeamEventStatus> localVarResponse = this.Client.Get<TeamEventStatus>("/team/{team_key}/event/{event_key}/status", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventStatus", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets the competition rank and status of the team at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of TeamEventStatus</returns>
    [KernelFunction, Description("Gets the competition rank and status of the team at the given event.")]
    [return: Description("Task of TeamEventStatus")]
    public async Task<TeamEventStatus> GetTeamEventStatusAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<TeamEventStatus> localVarResponse = await GetTeamEventStatusAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets the competition rank and status of the team at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
    [KernelFunction, Description("Gets the competition rank and status of the team at the given event.")]
    [return: Description("Task of ApiResponse (TeamEventStatus)")]
    public async Task<ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventStatus");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling EventApi->GetTeamEventStatus");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<TeamEventStatus> localVarResponse = await this.AsynchronousClient.GetAsync<TeamEventStatus>("/team/{team_key}/event/{event_key}/status", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventStatus", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    public IList<Event>? GetTeamEvents(string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = GetTeamEventsWithHttpInfo(teamKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    public ApiResponse<List<Event>> GetTeamEventsWithHttpInfo(string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEvents");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Event>> localVarResponse = this.Client.Get<List<Event>>("/team/{team_key}/events", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEvents", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    [KernelFunction, Description("Gets a list of all events this team has competed at.")]
    [return: Description("Task of List<Event>")]
    public async Task<List<Event>> GetTeamEventsAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = await GetTeamEventsAsyncWithHttpInfoAsync(teamKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    [KernelFunction, Description("Gets a list of all events this team has competed at.")]
    [return: Description("Task of ApiResponse (List<Event>)")]
    public async Task<ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEvents");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Event>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/team/{team_key}/events", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEvents", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    public IList<Event>? GetTeamEventsByYear(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = GetTeamEventsByYearWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    public ApiResponse<List<Event>> GetTeamEventsByYearWithHttpInfo(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Event>> localVarResponse = this.Client.Get<List<Event>>("/team/{team_key}/events/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    [KernelFunction, Description("Gets a list of events this team has competed at in the given year.")]
    [return: Description("Task of List<Event>")]
    public async Task<List<Event>> GetTeamEventsByYearAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = await GetTeamEventsByYearAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    [KernelFunction, Description("Gets a list of events this team has competed at in the given year.")]
    [return: Description("Task of ApiResponse (List<Event>)")]
    public async Task<ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Event>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/team/{team_key}/events/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of the event keys for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamEventsByYearKeys(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamEventsByYearKeysWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of the event keys for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamEventsByYearKeysWithHttpInfo(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/events/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of the event keys for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of the event keys for events this team has competed at in the given year.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetTeamEventsByYearKeysAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamEventsByYearKeysAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of the event keys for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of the event keys for events this team has competed at in the given year.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/events/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    public IList<EventSimple>? GetTeamEventsByYearSimple(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsByYearSimpleWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    public ApiResponse<List<EventSimple>> GetTeamEventsByYearSimpleWithHttpInfo(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EventSimple>> localVarResponse = this.Client.Get<List<EventSimple>>("/team/{team_key}/events/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of events this team has competed at in the given year.")]
    [return: Description("Task of List<EventSimple>")]
    public async Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsByYearSimpleAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of events this team has competed at in the given year.")]
    [return: Description("Task of ApiResponse (List<EventSimple>)")]
    public async Task<ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsByYearSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EventSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/team/{team_key}/events/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of the event keys for all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamEventsKeys(string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamEventsKeysWithHttpInfo(teamKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of the event keys for all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamEventsKeysWithHttpInfo(string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of the event keys for all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of the event keys for all events this team has competed at.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetTeamEventsKeysAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamEventsKeysAsyncWithHttpInfoAsync(teamKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of the event keys for all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of the event keys for all events this team has competed at.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    public IList<EventSimple>? GetTeamEventsSimple(string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsSimpleWithHttpInfo(teamKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    public ApiResponse<List<EventSimple>> GetTeamEventsSimpleWithHttpInfo(string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EventSimple>> localVarResponse = this.Client.Get<List<EventSimple>>("/team/{team_key}/events/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of all events this team has competed at.")]
    [return: Description("Task of List<EventSimple>")]
    public async Task<List<EventSimple>> GetTeamEventsSimpleAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsSimpleAsyncWithHttpInfoAsync(teamKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of all events this team has competed at.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of all events this team has competed at.")]
    [return: Description("Task of ApiResponse (List<EventSimple>)")]
    public async Task<ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EventSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/team/{team_key}/events/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public IDictionary<string, TeamEventStatus>? GetTeamEventsStatusesByYear(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetTeamEventsStatusesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsStatusesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = this.Client.Get<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for events this team has competed at in the given year.")]
    [return: Description("Task of Dictionary<string, TeamEventStatus>")]
    public async Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetTeamEventsStatusesByYearAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for events this team has competed at in the given year.")]
    [return: Description("Task of ApiResponse (Dictionary<string, TeamEventStatus>)")]
    public async Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling EventApi->GetTeamEventsStatusesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
