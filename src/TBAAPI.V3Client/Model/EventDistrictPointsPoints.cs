/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using System.Text;

/// <summary>
/// EventDistrictPointsPoints
/// </summary>
[DataContract]
public partial class EventDistrictPointsPoints : IEquatable<EventDistrictPointsPoints>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EventDistrictPointsPoints" /> class.
    /// </summary>
    [JsonConstructor]
    protected EventDistrictPointsPoints() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="EventDistrictPointsPoints" /> class.
    /// </summary>
    /// <param name="total">Total points awarded at this event. (required).</param>
    /// <param name="alliancePoints">Points awarded for alliance selection (required).</param>
    /// <param name="elimPoints">Points awarded for elimination match performance. (required).</param>
    /// <param name="awardPoints">Points awarded for event awards. (required).</param>
    /// <param name="qualPoints">Points awarded for qualification match performance. (required).</param>
    public EventDistrictPointsPoints(int total = default, int alliancePoints = default, int elimPoints = default, int awardPoints = default, int qualPoints = default)
    {
        this.Total = total;
        this.AlliancePoints = alliancePoints;
        this.ElimPoints = elimPoints;
        this.AwardPoints = awardPoints;
        this.QualPoints = qualPoints;
    }

    /// <summary>
    /// Total points awarded at this event.
    /// </summary>
    /// <value>Total points awarded at this event.</value>
    [DataMember(Name = "total", EmitDefaultValue = false)]
    public int Total { get; set; }

    /// <summary>
    /// Points awarded for alliance selection
    /// </summary>
    /// <value>Points awarded for alliance selection</value>
    [DataMember(Name = "alliance_points", EmitDefaultValue = false)]
    public int AlliancePoints { get; set; }

    /// <summary>
    /// Points awarded for elimination match performance.
    /// </summary>
    /// <value>Points awarded for elimination match performance.</value>
    [DataMember(Name = "elim_points", EmitDefaultValue = false)]
    public int ElimPoints { get; set; }

    /// <summary>
    /// Points awarded for event awards.
    /// </summary>
    /// <value>Points awarded for event awards.</value>
    [DataMember(Name = "award_points", EmitDefaultValue = false)]
    public int AwardPoints { get; set; }

    /// <summary>
    /// Points awarded for qualification match performance.
    /// </summary>
    /// <value>Points awarded for qualification match performance.</value>
    [DataMember(Name = "qual_points", EmitDefaultValue = false)]
    public int QualPoints { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class EventDistrictPointsPoints {\n");
        sb.Append("  Total: ").Append(this.Total).Append('\n');
        sb.Append("  AlliancePoints: ").Append(this.AlliancePoints).Append('\n');
        sb.Append("  ElimPoints: ").Append(this.ElimPoints).Append('\n');
        sb.Append("  AwardPoints: ").Append(this.AwardPoints).Append('\n');
        sb.Append("  QualPoints: ").Append(this.QualPoints).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as EventDistrictPointsPoints);

    /// <summary>
    /// Returns true if EventDistrictPointsPoints instances are equal
    /// </summary>
    /// <param name="input">Instance of EventDistrictPointsPoints to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(EventDistrictPointsPoints input)
    {
        return input != null
&& (
                this.Total == input.Total ||
                this.Total.Equals(input.Total)
            ) &&
            (
                this.AlliancePoints == input.AlliancePoints ||
                this.AlliancePoints.Equals(input.AlliancePoints)
            ) &&
            (
                this.ElimPoints == input.ElimPoints ||
                this.ElimPoints.Equals(input.ElimPoints)
            ) &&
            (
                this.AwardPoints == input.AwardPoints ||
                this.AwardPoints.Equals(input.AwardPoints)
            ) &&
            (
                this.QualPoints == input.QualPoints ||
                this.QualPoints.Equals(input.QualPoints)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode() => HashCode.Combine(this.Total, this.AlliancePoints, this.ElimPoints, this.AwardPoints, this.QualPoints);

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
