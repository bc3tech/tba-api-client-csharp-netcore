/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// Team
/// </summary>
[DataContract]
public partial class Team : IEquatable<Team>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Team" /> class.
    /// </summary>
    [JsonConstructor]
    protected Team() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Team" /> class.
    /// </summary>
    /// <param name="key">TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number. (required).</param>
    /// <param name="teamNumber">Official team number issued by FIRST. (required).</param>
    /// <param name="nickname">Team nickname provided by FIRST..</param>
    /// <param name="name">Official long name registered with FIRST. (required).</param>
    /// <param name="schoolName">Name of team school or affilited group registered with FIRST..</param>
    /// <param name="city">City of team derived from parsing the address registered with FIRST..</param>
    /// <param name="stateProv">State of team derived from parsing the address registered with FIRST..</param>
    /// <param name="country">Country of team derived from parsing the address registered with FIRST..</param>
    /// <param name="address">Will be NULL, for future development..</param>
    /// <param name="postalCode">Postal code from the team address..</param>
    /// <param name="gmapsPlaceId">Will be NULL, for future development..</param>
    /// <param name="gmapsUrl">Will be NULL, for future development..</param>
    /// <param name="lat">Will be NULL, for future development..</param>
    /// <param name="lng">Will be NULL, for future development..</param>
    /// <param name="locationName">Will be NULL, for future development..</param>
    /// <param name="website">Official website associated with the team..</param>
    /// <param name="rookieYear">First year the team officially competed..</param>
    /// <param name="motto">Team&#39;s motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019..</param>
    /// <param name="homeChampionship">Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value..</param>
    public Team(string? key = default, int teamNumber = default, string? nickname = default, string? name = default, string? schoolName = default, string? city = default, string? stateProv = default, string? country = default, string? address = default, string? postalCode = default, string? gmapsPlaceId = default, string? gmapsUrl = default, double lat = default, double lng = default, string? locationName = default, string? website = default, int rookieYear = default, string? motto = default, object? homeChampionship = default)
    {
        // to ensure "key" is required (not null)
        this.Key = key ?? throw new ArgumentNullException(nameof(key));
        this.TeamNumber = teamNumber;
        // to ensure "name" is required (not null)
        this.Name = name ?? throw new ArgumentNullException(nameof(name));
        this.Nickname = nickname;
        this.SchoolName = schoolName;
        this.City = city;
        this.StateProv = stateProv;
        this.Country = country;
        this.Address = address;
        this.PostalCode = postalCode;
        this.GmapsPlaceId = gmapsPlaceId;
        this.GmapsUrl = gmapsUrl;
        this.Lat = lat;
        this.Lng = lng;
        this.LocationName = locationName;
        this.Website = website;
        this.RookieYear = rookieYear;
        this.Motto = motto;
        this.HomeChampionship = homeChampionship;
    }

    /// <summary>
    /// TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number.
    /// </summary>
    /// <value>TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number.</value>
    [DataMember(Name = "key", EmitDefaultValue = false), JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// Official team number issued by FIRST.
    /// </summary>
    /// <value>Official team number issued by FIRST.</value>
    [DataMember(Name = "team_number", EmitDefaultValue = false), JsonPropertyName("team_number")]
    public int TeamNumber { get; set; }

    /// <summary>
    /// Team nickname provided by FIRST.
    /// </summary>
    /// <value>Team nickname provided by FIRST.</value>
    [DataMember(Name = "nickname", EmitDefaultValue = false), JsonPropertyName("nickname")]
    public string Nickname { get; set; }

    /// <summary>
    /// Official long name registered with FIRST.
    /// </summary>
    /// <value>Official long name registered with FIRST.</value>
    [DataMember(Name = "name", EmitDefaultValue = false), JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// Name of team school or affilited group registered with FIRST.
    /// </summary>
    /// <value>Name of team school or affilited group registered with FIRST.</value>
    [DataMember(Name = "school_name", EmitDefaultValue = false), JsonPropertyName("school_name")]
    public string SchoolName { get; set; }

    /// <summary>
    /// City of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>City of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "city", EmitDefaultValue = false), JsonPropertyName("city")]
    public string City { get; set; }

    /// <summary>
    /// State of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>State of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "state_prov", EmitDefaultValue = false), JsonPropertyName("state_prov")]
    public string StateProv { get; set; }

    /// <summary>
    /// Country of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>Country of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "country", EmitDefaultValue = false), JsonPropertyName("country")]
    public string Country { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "address", EmitDefaultValue = false), JsonPropertyName("address")]
    public string Address { get; set; }

    /// <summary>
    /// Postal code from the team address.
    /// </summary>
    /// <value>Postal code from the team address.</value>
    [DataMember(Name = "postal_code", EmitDefaultValue = false), JsonPropertyName("postal_code")]
    public string PostalCode { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "gmaps_place_id", EmitDefaultValue = false), JsonPropertyName("gmaps_place_id")]
    public string GmapsPlaceId { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "gmaps_url", EmitDefaultValue = false), JsonPropertyName("gmaps_url")]
    public string GmapsUrl { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "lat", EmitDefaultValue = false), JsonPropertyName("lat")]
    public double Lat { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "lng", EmitDefaultValue = false), JsonPropertyName("lng")]
    public double Lng { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "location_name", EmitDefaultValue = false), JsonPropertyName("location_name")]
    public string LocationName { get; set; }

    /// <summary>
    /// Official website associated with the team.
    /// </summary>
    /// <value>Official website associated with the team.</value>
    [DataMember(Name = "website", EmitDefaultValue = false), JsonPropertyName("website")]
    public string Website { get; set; }

    /// <summary>
    /// First year the team officially competed.
    /// </summary>
    /// <value>First year the team officially competed.</value>
    [DataMember(Name = "rookie_year", EmitDefaultValue = false), JsonPropertyName("rookie_year")]
    public int RookieYear { get; set; }

    /// <summary>
    /// Team&#39;s motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
    /// </summary>
    /// <value>Team&#39;s motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.</value>
    [DataMember(Name = "motto", EmitDefaultValue = false), JsonPropertyName("motto")]
    public string Motto { get; set; }

    /// <summary>
    /// Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
    /// </summary>
    /// <value>Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.</value>
    [DataMember(Name = "home_championship", EmitDefaultValue = false), JsonPropertyName("home_championship")]
    public object HomeChampionship { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Team {\n");
        sb.Append("  Key: ").Append(this.Key).Append('\n');
        sb.Append("  TeamNumber: ").Append(this.TeamNumber).Append('\n');
        sb.Append("  Nickname: ").Append(this.Nickname).Append('\n');
        sb.Append("  Name: ").Append(this.Name).Append('\n');
        sb.Append("  SchoolName: ").Append(this.SchoolName).Append('\n');
        sb.Append("  City: ").Append(this.City).Append('\n');
        sb.Append("  StateProv: ").Append(this.StateProv).Append('\n');
        sb.Append("  Country: ").Append(this.Country).Append('\n');
        sb.Append("  Address: ").Append(this.Address).Append('\n');
        sb.Append("  PostalCode: ").Append(this.PostalCode).Append('\n');
        sb.Append("  GmapsPlaceId: ").Append(this.GmapsPlaceId).Append('\n');
        sb.Append("  GmapsUrl: ").Append(this.GmapsUrl).Append('\n');
        sb.Append("  Lat: ").Append(this.Lat).Append('\n');
        sb.Append("  Lng: ").Append(this.Lng).Append('\n');
        sb.Append("  LocationName: ").Append(this.LocationName).Append('\n');
        sb.Append("  Website: ").Append(this.Website).Append('\n');
        sb.Append("  RookieYear: ").Append(this.RookieYear).Append('\n');
        sb.Append("  Motto: ").Append(this.Motto).Append('\n');
        sb.Append("  HomeChampionship: ").Append(this.HomeChampionship).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object? input) => Equals(input as Team);

    /// <summary>
    /// Returns true if Team instances are equal
    /// </summary>
    /// <param name="input">Instance of Team to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Team? input)
    {
        return input is not null
&& (
                this.Key == input.Key ||
                (this.Key is not null &&
                this.Key.Equals(input.Key))
            ) &&
            (
                this.TeamNumber == input.TeamNumber ||
                this.TeamNumber.Equals(input.TeamNumber)
            ) &&
            (
                this.Nickname == input.Nickname ||
                (this.Nickname is not null &&
                this.Nickname.Equals(input.Nickname))
            ) &&
            (
                this.Name == input.Name ||
                (this.Name is not null &&
                this.Name.Equals(input.Name))
            ) &&
            (
                this.SchoolName == input.SchoolName ||
                (this.SchoolName is not null &&
                this.SchoolName.Equals(input.SchoolName))
            ) &&
            (
                this.City == input.City ||
                (this.City is not null &&
                this.City.Equals(input.City))
            ) &&
            (
                this.StateProv == input.StateProv ||
                (this.StateProv is not null &&
                this.StateProv.Equals(input.StateProv))
            ) &&
            (
                this.Country == input.Country ||
                (this.Country is not null &&
                this.Country.Equals(input.Country))
            ) &&
            (
                this.Address == input.Address ||
                (this.Address is not null &&
                this.Address.Equals(input.Address))
            ) &&
            (
                this.PostalCode == input.PostalCode ||
                (this.PostalCode is not null &&
                this.PostalCode.Equals(input.PostalCode))
            ) &&
            (
                this.GmapsPlaceId == input.GmapsPlaceId ||
                (this.GmapsPlaceId is not null &&
                this.GmapsPlaceId.Equals(input.GmapsPlaceId))
            ) &&
            (
                this.GmapsUrl == input.GmapsUrl ||
                (this.GmapsUrl is not null &&
                this.GmapsUrl.Equals(input.GmapsUrl))
            ) &&
            (
                this.Lat == input.Lat ||
                this.Lat.Equals(input.Lat)
            ) &&
            (
                this.Lng == input.Lng ||
                this.Lng.Equals(input.Lng)
            ) &&
            (
                this.LocationName == input.LocationName ||
                (this.LocationName is not null &&
                this.LocationName.Equals(input.LocationName))
            ) &&
            (
                this.Website == input.Website ||
                (this.Website is not null &&
                this.Website.Equals(input.Website))
            ) &&
            (
                this.RookieYear == input.RookieYear ||
                this.RookieYear.Equals(input.RookieYear)
            ) &&
            (
                this.Motto == input.Motto ||
                (this.Motto is not null &&
                this.Motto.Equals(input.Motto))
            ) &&
            (
                this.HomeChampionship == input.HomeChampionship ||
                (this.HomeChampionship is not null &&
                this.HomeChampionship.Equals(input.HomeChampionship))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.Key is not null)
            {
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.TeamNumber.GetHashCode();
            if (this.Nickname is not null)
            {
                hashCode = (hashCode * 59) + this.Nickname.GetHashCode();
            }

            if (this.Name is not null)
            {
                hashCode = (hashCode * 59) + this.Name.GetHashCode();
            }

            if (this.SchoolName is not null)
            {
                hashCode = (hashCode * 59) + this.SchoolName.GetHashCode();
            }

            if (this.City is not null)
            {
                hashCode = (hashCode * 59) + this.City.GetHashCode();
            }

            if (this.StateProv is not null)
            {
                hashCode = (hashCode * 59) + this.StateProv.GetHashCode();
            }

            if (this.Country is not null)
            {
                hashCode = (hashCode * 59) + this.Country.GetHashCode();
            }

            if (this.Address is not null)
            {
                hashCode = (hashCode * 59) + this.Address.GetHashCode();
            }

            if (this.PostalCode is not null)
            {
                hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
            }

            if (this.GmapsPlaceId is not null)
            {
                hashCode = (hashCode * 59) + this.GmapsPlaceId.GetHashCode();
            }

            if (this.GmapsUrl is not null)
            {
                hashCode = (hashCode * 59) + this.GmapsUrl.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.Lat.GetHashCode();
            hashCode = (hashCode * 59) + this.Lng.GetHashCode();
            if (this.LocationName is not null)
            {
                hashCode = (hashCode * 59) + this.LocationName.GetHashCode();
            }

            if (this.Website is not null)
            {
                hashCode = (hashCode * 59) + this.Website.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.RookieYear.GetHashCode();
            if (this.Motto is not null)
            {
                hashCode = (hashCode * 59) + this.Motto.GetHashCode();
            }

            if (this.HomeChampionship is not null)
            {
                hashCode = (hashCode * 59) + this.HomeChampionship.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
