/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// MatchScoreBreakdown2017Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2017Alliance" /> class.
/// </remarks>
/// <param name="autoPoints">autoPoints.</param>
/// <param name="teleopPoints">teleopPoints.</param>
/// <param name="foulPoints">foulPoints.</param>
/// <param name="adjustPoints">adjustPoints.</param>
/// <param name="totalPoints">totalPoints.</param>
/// <param name="robot1Auto">robot1Auto.</param>
/// <param name="robot2Auto">robot2Auto.</param>
/// <param name="robot3Auto">robot3Auto.</param>
/// <param name="rotor1Auto">rotor1Auto.</param>
/// <param name="rotor2Auto">rotor2Auto.</param>
/// <param name="autoFuelLow">autoFuelLow.</param>
/// <param name="autoFuelHigh">autoFuelHigh.</param>
/// <param name="autoMobilityPoints">autoMobilityPoints.</param>
/// <param name="autoRotorPoints">autoRotorPoints.</param>
/// <param name="autoFuelPoints">autoFuelPoints.</param>
/// <param name="teleopFuelPoints">teleopFuelPoints.</param>
/// <param name="teleopFuelLow">teleopFuelLow.</param>
/// <param name="teleopFuelHigh">teleopFuelHigh.</param>
/// <param name="teleopRotorPoints">teleopRotorPoints.</param>
/// <param name="kPaRankingPointAchieved">kPaRankingPointAchieved.</param>
/// <param name="teleopTakeoffPoints">teleopTakeoffPoints.</param>
/// <param name="kPaBonusPoints">kPaBonusPoints.</param>
/// <param name="rotorBonusPoints">rotorBonusPoints.</param>
/// <param name="rotor1Engaged">rotor1Engaged.</param>
/// <param name="rotor2Engaged">rotor2Engaged.</param>
/// <param name="rotor3Engaged">rotor3Engaged.</param>
/// <param name="rotor4Engaged">rotor4Engaged.</param>
/// <param name="rotorRankingPointAchieved">rotorRankingPointAchieved.</param>
/// <param name="techFoulCount">techFoulCount.</param>
/// <param name="foulCount">foulCount.</param>
/// <param name="touchpadNear">touchpadNear.</param>
/// <param name="touchpadMiddle">touchpadMiddle.</param>
/// <param name="touchpadFar">touchpadFar.</param>
[DataContract]
public partial class MatchScoreBreakdown2017Alliance(int autoPoints = default, int teleopPoints = default, int foulPoints = default, int adjustPoints = default, int totalPoints = default, MatchScoreBreakdown2017Alliance.Robot1AutoEnum? robot1Auto = default, MatchScoreBreakdown2017Alliance.Robot2AutoEnum? robot2Auto = default, MatchScoreBreakdown2017Alliance.Robot3AutoEnum? robot3Auto = default, bool rotor1Auto = default, bool rotor2Auto = default, int autoFuelLow = default, int autoFuelHigh = default, int autoMobilityPoints = default, int autoRotorPoints = default, int autoFuelPoints = default, int teleopFuelPoints = default, int teleopFuelLow = default, int teleopFuelHigh = default, int teleopRotorPoints = default, bool kPaRankingPointAchieved = default, int teleopTakeoffPoints = default, int kPaBonusPoints = default, int rotorBonusPoints = default, bool rotor1Engaged = default, bool rotor2Engaged = default, bool rotor3Engaged = default, bool rotor4Engaged = default, bool rotorRankingPointAchieved = default, int techFoulCount = default, int foulCount = default, string touchpadNear = default, string touchpadMiddle = default, string touchpadFar = default) : IEquatable<MatchScoreBreakdown2017Alliance>, IValidatableObject
{
    /// <summary>
    /// Defines Robot1Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum Robot1AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 1,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3

    }

    /// <summary>
    /// Gets or Sets Robot1Auto
    /// </summary>
    [DataMember(Name = "robot1Auto", EmitDefaultValue = false), JsonPropertyName("robot1Auto")]
    public Robot1AutoEnum? Robot1Auto { get; set; } = robot1Auto;
    /// <summary>
    /// Defines Robot2Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum Robot2AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 1,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3

    }

    /// <summary>
    /// Gets or Sets Robot2Auto
    /// </summary>
    [DataMember(Name = "robot2Auto", EmitDefaultValue = false), JsonPropertyName("robot2Auto")]
    public Robot2AutoEnum? Robot2Auto { get; set; } = robot2Auto;
    /// <summary>
    /// Defines Robot3Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum Robot3AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 1,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3

    }

    /// <summary>
    /// Gets or Sets Robot3Auto
    /// </summary>
    [DataMember(Name = "robot3Auto", EmitDefaultValue = false), JsonPropertyName("robot3Auto")]
    public Robot3AutoEnum? Robot3Auto { get; set; } = robot3Auto;

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>
    [DataMember(Name = "autoPoints", EmitDefaultValue = false), JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; } = autoPoints;

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>
    [DataMember(Name = "teleopPoints", EmitDefaultValue = false), JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; } = teleopPoints;

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>
    [DataMember(Name = "foulPoints", EmitDefaultValue = false), JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; } = foulPoints;

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>
    [DataMember(Name = "adjustPoints", EmitDefaultValue = false), JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; } = adjustPoints;

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>
    [DataMember(Name = "totalPoints", EmitDefaultValue = false), JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; } = totalPoints;

    /// <summary>
    /// Gets or Sets Rotor1Auto
    /// </summary>
    [DataMember(Name = "rotor1Auto", EmitDefaultValue = false), JsonPropertyName("rotor1Auto")]
    public bool Rotor1Auto { get; set; } = rotor1Auto;

    /// <summary>
    /// Gets or Sets Rotor2Auto
    /// </summary>
    [DataMember(Name = "rotor2Auto", EmitDefaultValue = false), JsonPropertyName("rotor2Auto")]
    public bool Rotor2Auto { get; set; } = rotor2Auto;

    /// <summary>
    /// Gets or Sets AutoFuelLow
    /// </summary>
    [DataMember(Name = "autoFuelLow", EmitDefaultValue = false), JsonPropertyName("autoFuelLow")]
    public int AutoFuelLow { get; set; } = autoFuelLow;

    /// <summary>
    /// Gets or Sets AutoFuelHigh
    /// </summary>
    [DataMember(Name = "autoFuelHigh", EmitDefaultValue = false), JsonPropertyName("autoFuelHigh")]
    public int AutoFuelHigh { get; set; } = autoFuelHigh;

    /// <summary>
    /// Gets or Sets AutoMobilityPoints
    /// </summary>
    [DataMember(Name = "autoMobilityPoints", EmitDefaultValue = false), JsonPropertyName("autoMobilityPoints")]
    public int AutoMobilityPoints { get; set; } = autoMobilityPoints;

    /// <summary>
    /// Gets or Sets AutoRotorPoints
    /// </summary>
    [DataMember(Name = "autoRotorPoints", EmitDefaultValue = false), JsonPropertyName("autoRotorPoints")]
    public int AutoRotorPoints { get; set; } = autoRotorPoints;

    /// <summary>
    /// Gets or Sets AutoFuelPoints
    /// </summary>
    [DataMember(Name = "autoFuelPoints", EmitDefaultValue = false), JsonPropertyName("autoFuelPoints")]
    public int AutoFuelPoints { get; set; } = autoFuelPoints;

    /// <summary>
    /// Gets or Sets TeleopFuelPoints
    /// </summary>
    [DataMember(Name = "teleopFuelPoints", EmitDefaultValue = false), JsonPropertyName("teleopFuelPoints")]
    public int TeleopFuelPoints { get; set; } = teleopFuelPoints;

    /// <summary>
    /// Gets or Sets TeleopFuelLow
    /// </summary>
    [DataMember(Name = "teleopFuelLow", EmitDefaultValue = false), JsonPropertyName("teleopFuelLow")]
    public int TeleopFuelLow { get; set; } = teleopFuelLow;

    /// <summary>
    /// Gets or Sets TeleopFuelHigh
    /// </summary>
    [DataMember(Name = "teleopFuelHigh", EmitDefaultValue = false), JsonPropertyName("teleopFuelHigh")]
    public int TeleopFuelHigh { get; set; } = teleopFuelHigh;

    /// <summary>
    /// Gets or Sets TeleopRotorPoints
    /// </summary>
    [DataMember(Name = "teleopRotorPoints", EmitDefaultValue = false), JsonPropertyName("teleopRotorPoints")]
    public int TeleopRotorPoints { get; set; } = teleopRotorPoints;

    /// <summary>
    /// Gets or Sets KPaRankingPointAchieved
    /// </summary>
    [DataMember(Name = "kPaRankingPointAchieved", EmitDefaultValue = false), JsonPropertyName("kPaRankingPointAchieved")]
    public bool KPaRankingPointAchieved { get; set; } = kPaRankingPointAchieved;

    /// <summary>
    /// Gets or Sets TeleopTakeoffPoints
    /// </summary>
    [DataMember(Name = "teleopTakeoffPoints", EmitDefaultValue = false), JsonPropertyName("teleopTakeoffPoints")]
    public int TeleopTakeoffPoints { get; set; } = teleopTakeoffPoints;

    /// <summary>
    /// Gets or Sets KPaBonusPoints
    /// </summary>
    [DataMember(Name = "kPaBonusPoints", EmitDefaultValue = false), JsonPropertyName("kPaBonusPoints")]
    public int KPaBonusPoints { get; set; } = kPaBonusPoints;

    /// <summary>
    /// Gets or Sets RotorBonusPoints
    /// </summary>
    [DataMember(Name = "rotorBonusPoints", EmitDefaultValue = false), JsonPropertyName("rotorBonusPoints")]
    public int RotorBonusPoints { get; set; } = rotorBonusPoints;

    /// <summary>
    /// Gets or Sets Rotor1Engaged
    /// </summary>
    [DataMember(Name = "rotor1Engaged", EmitDefaultValue = false), JsonPropertyName("rotor1Engaged")]
    public bool Rotor1Engaged { get; set; } = rotor1Engaged;

    /// <summary>
    /// Gets or Sets Rotor2Engaged
    /// </summary>
    [DataMember(Name = "rotor2Engaged", EmitDefaultValue = false), JsonPropertyName("rotor2Engaged")]
    public bool Rotor2Engaged { get; set; } = rotor2Engaged;

    /// <summary>
    /// Gets or Sets Rotor3Engaged
    /// </summary>
    [DataMember(Name = "rotor3Engaged", EmitDefaultValue = false), JsonPropertyName("rotor3Engaged")]
    public bool Rotor3Engaged { get; set; } = rotor3Engaged;

    /// <summary>
    /// Gets or Sets Rotor4Engaged
    /// </summary>
    [DataMember(Name = "rotor4Engaged", EmitDefaultValue = false), JsonPropertyName("rotor4Engaged")]
    public bool Rotor4Engaged { get; set; } = rotor4Engaged;

    /// <summary>
    /// Gets or Sets RotorRankingPointAchieved
    /// </summary>
    [DataMember(Name = "rotorRankingPointAchieved", EmitDefaultValue = false), JsonPropertyName("rotorRankingPointAchieved")]
    public bool RotorRankingPointAchieved { get; set; } = rotorRankingPointAchieved;

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>
    [DataMember(Name = "techFoulCount", EmitDefaultValue = false), JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; } = techFoulCount;

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>
    [DataMember(Name = "foulCount", EmitDefaultValue = false), JsonPropertyName("foulCount")]
    public int FoulCount { get; set; } = foulCount;

    /// <summary>
    /// Gets or Sets TouchpadNear
    /// </summary>
    [DataMember(Name = "touchpadNear", EmitDefaultValue = false), JsonPropertyName("touchpadNear")]
    public string TouchpadNear { get; set; } = touchpadNear;

    /// <summary>
    /// Gets or Sets TouchpadMiddle
    /// </summary>
    [DataMember(Name = "touchpadMiddle", EmitDefaultValue = false), JsonPropertyName("touchpadMiddle")]
    public string TouchpadMiddle { get; set; } = touchpadMiddle;

    /// <summary>
    /// Gets or Sets TouchpadFar
    /// </summary>
    [DataMember(Name = "touchpadFar", EmitDefaultValue = false), JsonPropertyName("touchpadFar")]
    public string TouchpadFar { get; set; } = touchpadFar;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class MatchScoreBreakdown2017Alliance {\n");
        sb.Append("  AutoPoints: ").Append(this.AutoPoints).Append('\n');
        sb.Append("  TeleopPoints: ").Append(this.TeleopPoints).Append('\n');
        sb.Append("  FoulPoints: ").Append(this.FoulPoints).Append('\n');
        sb.Append("  AdjustPoints: ").Append(this.AdjustPoints).Append('\n');
        sb.Append("  TotalPoints: ").Append(this.TotalPoints).Append('\n');
        sb.Append("  Robot1Auto: ").Append(this.Robot1Auto).Append('\n');
        sb.Append("  Robot2Auto: ").Append(this.Robot2Auto).Append('\n');
        sb.Append("  Robot3Auto: ").Append(this.Robot3Auto).Append('\n');
        sb.Append("  Rotor1Auto: ").Append(this.Rotor1Auto).Append('\n');
        sb.Append("  Rotor2Auto: ").Append(this.Rotor2Auto).Append('\n');
        sb.Append("  AutoFuelLow: ").Append(this.AutoFuelLow).Append('\n');
        sb.Append("  AutoFuelHigh: ").Append(this.AutoFuelHigh).Append('\n');
        sb.Append("  AutoMobilityPoints: ").Append(this.AutoMobilityPoints).Append('\n');
        sb.Append("  AutoRotorPoints: ").Append(this.AutoRotorPoints).Append('\n');
        sb.Append("  AutoFuelPoints: ").Append(this.AutoFuelPoints).Append('\n');
        sb.Append("  TeleopFuelPoints: ").Append(this.TeleopFuelPoints).Append('\n');
        sb.Append("  TeleopFuelLow: ").Append(this.TeleopFuelLow).Append('\n');
        sb.Append("  TeleopFuelHigh: ").Append(this.TeleopFuelHigh).Append('\n');
        sb.Append("  TeleopRotorPoints: ").Append(this.TeleopRotorPoints).Append('\n');
        sb.Append("  KPaRankingPointAchieved: ").Append(this.KPaRankingPointAchieved).Append('\n');
        sb.Append("  TeleopTakeoffPoints: ").Append(this.TeleopTakeoffPoints).Append('\n');
        sb.Append("  KPaBonusPoints: ").Append(this.KPaBonusPoints).Append('\n');
        sb.Append("  RotorBonusPoints: ").Append(this.RotorBonusPoints).Append('\n');
        sb.Append("  Rotor1Engaged: ").Append(this.Rotor1Engaged).Append('\n');
        sb.Append("  Rotor2Engaged: ").Append(this.Rotor2Engaged).Append('\n');
        sb.Append("  Rotor3Engaged: ").Append(this.Rotor3Engaged).Append('\n');
        sb.Append("  Rotor4Engaged: ").Append(this.Rotor4Engaged).Append('\n');
        sb.Append("  RotorRankingPointAchieved: ").Append(this.RotorRankingPointAchieved).Append('\n');
        sb.Append("  TechFoulCount: ").Append(this.TechFoulCount).Append('\n');
        sb.Append("  FoulCount: ").Append(this.FoulCount).Append('\n');
        sb.Append("  TouchpadNear: ").Append(this.TouchpadNear).Append('\n');
        sb.Append("  TouchpadMiddle: ").Append(this.TouchpadMiddle).Append('\n');
        sb.Append("  TouchpadFar: ").Append(this.TouchpadFar).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as MatchScoreBreakdown2017Alliance);

    /// <summary>
    /// Returns true if MatchScoreBreakdown2017Alliance instances are equal
    /// </summary>
    /// <param name="input">Instance of MatchScoreBreakdown2017Alliance to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(MatchScoreBreakdown2017Alliance input)
    {
        return input != null
&& (
                this.AutoPoints == input.AutoPoints ||
                this.AutoPoints.Equals(input.AutoPoints)
            ) &&
            (
                this.TeleopPoints == input.TeleopPoints ||
                this.TeleopPoints.Equals(input.TeleopPoints)
            ) &&
            (
                this.FoulPoints == input.FoulPoints ||
                this.FoulPoints.Equals(input.FoulPoints)
            ) &&
            (
                this.AdjustPoints == input.AdjustPoints ||
                this.AdjustPoints.Equals(input.AdjustPoints)
            ) &&
            (
                this.TotalPoints == input.TotalPoints ||
                this.TotalPoints.Equals(input.TotalPoints)
            ) &&
            (
                this.Robot1Auto == input.Robot1Auto ||
                this.Robot1Auto.Equals(input.Robot1Auto)
            ) &&
            (
                this.Robot2Auto == input.Robot2Auto ||
                this.Robot2Auto.Equals(input.Robot2Auto)
            ) &&
            (
                this.Robot3Auto == input.Robot3Auto ||
                this.Robot3Auto.Equals(input.Robot3Auto)
            ) &&
            (
                this.Rotor1Auto == input.Rotor1Auto ||
                this.Rotor1Auto.Equals(input.Rotor1Auto)
            ) &&
            (
                this.Rotor2Auto == input.Rotor2Auto ||
                this.Rotor2Auto.Equals(input.Rotor2Auto)
            ) &&
            (
                this.AutoFuelLow == input.AutoFuelLow ||
                this.AutoFuelLow.Equals(input.AutoFuelLow)
            ) &&
            (
                this.AutoFuelHigh == input.AutoFuelHigh ||
                this.AutoFuelHigh.Equals(input.AutoFuelHigh)
            ) &&
            (
                this.AutoMobilityPoints == input.AutoMobilityPoints ||
                this.AutoMobilityPoints.Equals(input.AutoMobilityPoints)
            ) &&
            (
                this.AutoRotorPoints == input.AutoRotorPoints ||
                this.AutoRotorPoints.Equals(input.AutoRotorPoints)
            ) &&
            (
                this.AutoFuelPoints == input.AutoFuelPoints ||
                this.AutoFuelPoints.Equals(input.AutoFuelPoints)
            ) &&
            (
                this.TeleopFuelPoints == input.TeleopFuelPoints ||
                this.TeleopFuelPoints.Equals(input.TeleopFuelPoints)
            ) &&
            (
                this.TeleopFuelLow == input.TeleopFuelLow ||
                this.TeleopFuelLow.Equals(input.TeleopFuelLow)
            ) &&
            (
                this.TeleopFuelHigh == input.TeleopFuelHigh ||
                this.TeleopFuelHigh.Equals(input.TeleopFuelHigh)
            ) &&
            (
                this.TeleopRotorPoints == input.TeleopRotorPoints ||
                this.TeleopRotorPoints.Equals(input.TeleopRotorPoints)
            ) &&
            (
                this.KPaRankingPointAchieved == input.KPaRankingPointAchieved ||
                this.KPaRankingPointAchieved.Equals(input.KPaRankingPointAchieved)
            ) &&
            (
                this.TeleopTakeoffPoints == input.TeleopTakeoffPoints ||
                this.TeleopTakeoffPoints.Equals(input.TeleopTakeoffPoints)
            ) &&
            (
                this.KPaBonusPoints == input.KPaBonusPoints ||
                this.KPaBonusPoints.Equals(input.KPaBonusPoints)
            ) &&
            (
                this.RotorBonusPoints == input.RotorBonusPoints ||
                this.RotorBonusPoints.Equals(input.RotorBonusPoints)
            ) &&
            (
                this.Rotor1Engaged == input.Rotor1Engaged ||
                this.Rotor1Engaged.Equals(input.Rotor1Engaged)
            ) &&
            (
                this.Rotor2Engaged == input.Rotor2Engaged ||
                this.Rotor2Engaged.Equals(input.Rotor2Engaged)
            ) &&
            (
                this.Rotor3Engaged == input.Rotor3Engaged ||
                this.Rotor3Engaged.Equals(input.Rotor3Engaged)
            ) &&
            (
                this.Rotor4Engaged == input.Rotor4Engaged ||
                this.Rotor4Engaged.Equals(input.Rotor4Engaged)
            ) &&
            (
                this.RotorRankingPointAchieved == input.RotorRankingPointAchieved ||
                this.RotorRankingPointAchieved.Equals(input.RotorRankingPointAchieved)
            ) &&
            (
                this.TechFoulCount == input.TechFoulCount ||
                this.TechFoulCount.Equals(input.TechFoulCount)
            ) &&
            (
                this.FoulCount == input.FoulCount ||
                this.FoulCount.Equals(input.FoulCount)
            ) &&
            (
                this.TouchpadNear == input.TouchpadNear ||
                (this.TouchpadNear != null &&
                this.TouchpadNear.Equals(input.TouchpadNear))
            ) &&
            (
                this.TouchpadMiddle == input.TouchpadMiddle ||
                (this.TouchpadMiddle != null &&
                this.TouchpadMiddle.Equals(input.TouchpadMiddle))
            ) &&
            (
                this.TouchpadFar == input.TouchpadFar ||
                (this.TouchpadFar != null &&
                this.TouchpadFar.Equals(input.TouchpadFar))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.AutoPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AdjustPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TotalPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.Robot1Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Robot2Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Robot3Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor1Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor2Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoFuelLow.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoFuelHigh.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoMobilityPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoRotorPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoFuelPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopFuelPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopFuelLow.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopFuelHigh.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopRotorPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.KPaRankingPointAchieved.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopTakeoffPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.KPaBonusPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.RotorBonusPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor1Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor2Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor3Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor4Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.RotorRankingPointAchieved.GetHashCode();
            hashCode = (hashCode * 59) + this.TechFoulCount.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulCount.GetHashCode();
            if (this.TouchpadNear != null)
            {
                hashCode = (hashCode * 59) + this.TouchpadNear.GetHashCode();
            }

            if (this.TouchpadMiddle != null)
            {
                hashCode = (hashCode * 59) + this.TouchpadMiddle.GetHashCode();
            }

            if (this.TouchpadFar != null)
            {
                hashCode = (hashCode * 59) + this.TouchpadFar.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
