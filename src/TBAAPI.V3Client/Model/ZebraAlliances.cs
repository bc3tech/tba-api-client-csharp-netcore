/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// ZebraAlliances
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="ZebraAlliances" /> class.
/// </remarks>
/// <param name="red">Zebra MotionWorks data for teams on the red alliance.</param>
/// <param name="blue">Zebra data for teams on the blue alliance.</param>
[DataContract]
public partial class ZebraAlliances(List<ZebraTeam> red = default, List<ZebraTeam> blue = default) : IEquatable<ZebraAlliances>, IValidatableObject
{

    /// <summary>
    /// Zebra MotionWorks data for teams on the red alliance
    /// </summary>
    /// <value>Zebra MotionWorks data for teams on the red alliance</value>
    [DataMember(Name = "red", EmitDefaultValue = false), JsonPropertyName("red")]
    public List<ZebraTeam> Red { get; set; } = red;

    /// <summary>
    /// Zebra data for teams on the blue alliance
    /// </summary>
    /// <value>Zebra data for teams on the blue alliance</value>
    [DataMember(Name = "blue", EmitDefaultValue = false), JsonPropertyName("blue")]
    public List<ZebraTeam> Blue { get; set; } = blue;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ZebraAlliances {\n");
        sb.Append("  Red: ").Append(this.Red).Append('\n');
        sb.Append("  Blue: ").Append(this.Blue).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as ZebraAlliances);

    /// <summary>
    /// Returns true if ZebraAlliances instances are equal
    /// </summary>
    /// <param name="input">Instance of ZebraAlliances to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ZebraAlliances input)
    {
        return input != null
&& (
                this.Red == input.Red ||
                (this.Red != null &&
                input.Red != null &&
                this.Red.SequenceEqual(input.Red))
            ) &&
            (
                this.Blue == input.Blue ||
                (this.Blue != null &&
                input.Blue != null &&
                this.Blue.SequenceEqual(input.Blue))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.Red != null)
            {
                hashCode = (hashCode * 59) + this.Red.GetHashCode();
            }

            if (this.Blue != null)
            {
                hashCode = (hashCode * 59) + this.Blue.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
