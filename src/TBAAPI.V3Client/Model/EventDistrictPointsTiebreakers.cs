/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// EventDistrictPointsTiebreakers
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="EventDistrictPointsTiebreakers" /> class.
/// </remarks>
/// <param name="highestQualScores">highestQualScores.</param>
/// <param name="qualWins">qualWins.</param>
[DataContract]
public partial class EventDistrictPointsTiebreakers(List<int> highestQualScores = default, int qualWins = default) : IEquatable<EventDistrictPointsTiebreakers>, IValidatableObject
{

    /// <summary>
    /// Gets or Sets HighestQualScores
    /// </summary>
    [DataMember(Name = "highest_qual_scores", EmitDefaultValue = false), JsonPropertyName("highest_qual_scores")]
    public List<int> HighestQualScores { get; set; } = highestQualScores;

    /// <summary>
    /// Gets or Sets QualWins
    /// </summary>
    [DataMember(Name = "qual_wins", EmitDefaultValue = false), JsonPropertyName("qual_wins")]
    public int QualWins { get; set; } = qualWins;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class EventDistrictPointsTiebreakers {\n");
        sb.Append("  HighestQualScores: ").Append(this.HighestQualScores).Append('\n');
        sb.Append("  QualWins: ").Append(this.QualWins).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as EventDistrictPointsTiebreakers);

    /// <summary>
    /// Returns true if EventDistrictPointsTiebreakers instances are equal
    /// </summary>
    /// <param name="input">Instance of EventDistrictPointsTiebreakers to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(EventDistrictPointsTiebreakers input)
    {
        return input != null
&& (
                this.HighestQualScores == input.HighestQualScores ||
                (this.HighestQualScores != null &&
                input.HighestQualScores != null &&
                this.HighestQualScores.SequenceEqual(input.HighestQualScores))
            ) &&
            (
                this.QualWins == input.QualWins ||
                this.QualWins.Equals(input.QualWins)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.HighestQualScores != null)
            {
                hashCode = (hashCode * 59) + this.HighestQualScores.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.QualWins.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
