/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// MatchScoreBreakdown2019Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2019Alliance" /> class.
/// </remarks>
/// <param name="adjustPoints">adjustPoints.</param>
/// <param name="autoPoints">autoPoints.</param>
/// <param name="bay1">bay1.</param>
/// <param name="bay2">bay2.</param>
/// <param name="bay3">bay3.</param>
/// <param name="bay4">bay4.</param>
/// <param name="bay5">bay5.</param>
/// <param name="bay6">bay6.</param>
/// <param name="bay7">bay7.</param>
/// <param name="bay8">bay8.</param>
/// <param name="cargoPoints">cargoPoints.</param>
/// <param name="completeRocketRankingPoint">completeRocketRankingPoint.</param>
/// <param name="completedRocketFar">completedRocketFar.</param>
/// <param name="completedRocketNear">completedRocketNear.</param>
/// <param name="endgameRobot1">endgameRobot1.</param>
/// <param name="endgameRobot2">endgameRobot2.</param>
/// <param name="endgameRobot3">endgameRobot3.</param>
/// <param name="foulCount">foulCount.</param>
/// <param name="foulPoints">foulPoints.</param>
/// <param name="habClimbPoints">habClimbPoints.</param>
/// <param name="habDockingRankingPoint">habDockingRankingPoint.</param>
/// <param name="habLineRobot1">habLineRobot1.</param>
/// <param name="habLineRobot2">habLineRobot2.</param>
/// <param name="habLineRobot3">habLineRobot3.</param>
/// <param name="hatchPanelPoints">hatchPanelPoints.</param>
/// <param name="lowLeftRocketFar">lowLeftRocketFar.</param>
/// <param name="lowLeftRocketNear">lowLeftRocketNear.</param>
/// <param name="lowRightRocketFar">lowRightRocketFar.</param>
/// <param name="lowRightRocketNear">lowRightRocketNear.</param>
/// <param name="midLeftRocketFar">midLeftRocketFar.</param>
/// <param name="midLeftRocketNear">midLeftRocketNear.</param>
/// <param name="midRightRocketFar">midRightRocketFar.</param>
/// <param name="midRightRocketNear">midRightRocketNear.</param>
/// <param name="preMatchBay1">preMatchBay1.</param>
/// <param name="preMatchBay2">preMatchBay2.</param>
/// <param name="preMatchBay3">preMatchBay3.</param>
/// <param name="preMatchBay6">preMatchBay6.</param>
/// <param name="preMatchBay7">preMatchBay7.</param>
/// <param name="preMatchBay8">preMatchBay8.</param>
/// <param name="preMatchLevelRobot1">preMatchLevelRobot1.</param>
/// <param name="preMatchLevelRobot2">preMatchLevelRobot2.</param>
/// <param name="preMatchLevelRobot3">preMatchLevelRobot3.</param>
/// <param name="rp">rp.</param>
/// <param name="sandStormBonusPoints">sandStormBonusPoints.</param>
/// <param name="techFoulCount">techFoulCount.</param>
/// <param name="teleopPoints">teleopPoints.</param>
/// <param name="topLeftRocketFar">topLeftRocketFar.</param>
/// <param name="topLeftRocketNear">topLeftRocketNear.</param>
/// <param name="topRightRocketFar">topRightRocketFar.</param>
/// <param name="topRightRocketNear">topRightRocketNear.</param>
/// <param name="totalPoints">totalPoints.</param>
[DataContract]
public partial class MatchScoreBreakdown2019Alliance(int adjustPoints = default, int autoPoints = default, string bay1 = default, string bay2 = default, string bay3 = default, string bay4 = default, string bay5 = default, string bay6 = default, string bay7 = default, string bay8 = default, int cargoPoints = default, bool completeRocketRankingPoint = default, bool completedRocketFar = default, bool completedRocketNear = default, string endgameRobot1 = default, string endgameRobot2 = default, string endgameRobot3 = default, int foulCount = default, int foulPoints = default, int habClimbPoints = default, bool habDockingRankingPoint = default, string habLineRobot1 = default, string habLineRobot2 = default, string habLineRobot3 = default, int hatchPanelPoints = default, string lowLeftRocketFar = default, string lowLeftRocketNear = default, string lowRightRocketFar = default, string lowRightRocketNear = default, string midLeftRocketFar = default, string midLeftRocketNear = default, string midRightRocketFar = default, string midRightRocketNear = default, string preMatchBay1 = default, string preMatchBay2 = default, string preMatchBay3 = default, string preMatchBay6 = default, string preMatchBay7 = default, string preMatchBay8 = default, string preMatchLevelRobot1 = default, string preMatchLevelRobot2 = default, string preMatchLevelRobot3 = default, int rp = default, int sandStormBonusPoints = default, int techFoulCount = default, int teleopPoints = default, string topLeftRocketFar = default, string topLeftRocketNear = default, string topRightRocketFar = default, string topRightRocketNear = default, int totalPoints = default) : IEquatable<MatchScoreBreakdown2019Alliance>, IValidatableObject
{

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>
    [DataMember(Name = "adjustPoints", EmitDefaultValue = false), JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; } = adjustPoints;

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>
    [DataMember(Name = "autoPoints", EmitDefaultValue = false), JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; } = autoPoints;

    /// <summary>
    /// Gets or Sets Bay1
    /// </summary>
    [DataMember(Name = "bay1", EmitDefaultValue = false), JsonPropertyName("bay1")]
    public string Bay1 { get; set; } = bay1;

    /// <summary>
    /// Gets or Sets Bay2
    /// </summary>
    [DataMember(Name = "bay2", EmitDefaultValue = false), JsonPropertyName("bay2")]
    public string Bay2 { get; set; } = bay2;

    /// <summary>
    /// Gets or Sets Bay3
    /// </summary>
    [DataMember(Name = "bay3", EmitDefaultValue = false), JsonPropertyName("bay3")]
    public string Bay3 { get; set; } = bay3;

    /// <summary>
    /// Gets or Sets Bay4
    /// </summary>
    [DataMember(Name = "bay4", EmitDefaultValue = false), JsonPropertyName("bay4")]
    public string Bay4 { get; set; } = bay4;

    /// <summary>
    /// Gets or Sets Bay5
    /// </summary>
    [DataMember(Name = "bay5", EmitDefaultValue = false), JsonPropertyName("bay5")]
    public string Bay5 { get; set; } = bay5;

    /// <summary>
    /// Gets or Sets Bay6
    /// </summary>
    [DataMember(Name = "bay6", EmitDefaultValue = false), JsonPropertyName("bay6")]
    public string Bay6 { get; set; } = bay6;

    /// <summary>
    /// Gets or Sets Bay7
    /// </summary>
    [DataMember(Name = "bay7", EmitDefaultValue = false), JsonPropertyName("bay7")]
    public string Bay7 { get; set; } = bay7;

    /// <summary>
    /// Gets or Sets Bay8
    /// </summary>
    [DataMember(Name = "bay8", EmitDefaultValue = false), JsonPropertyName("bay8")]
    public string Bay8 { get; set; } = bay8;

    /// <summary>
    /// Gets or Sets CargoPoints
    /// </summary>
    [DataMember(Name = "cargoPoints", EmitDefaultValue = false), JsonPropertyName("cargoPoints")]
    public int CargoPoints { get; set; } = cargoPoints;

    /// <summary>
    /// Gets or Sets CompleteRocketRankingPoint
    /// </summary>
    [DataMember(Name = "completeRocketRankingPoint", EmitDefaultValue = false), JsonPropertyName("completeRocketRankingPoint")]
    public bool CompleteRocketRankingPoint { get; set; } = completeRocketRankingPoint;

    /// <summary>
    /// Gets or Sets CompletedRocketFar
    /// </summary>
    [DataMember(Name = "completedRocketFar", EmitDefaultValue = false), JsonPropertyName("completedRocketFar")]
    public bool CompletedRocketFar { get; set; } = completedRocketFar;

    /// <summary>
    /// Gets or Sets CompletedRocketNear
    /// </summary>
    [DataMember(Name = "completedRocketNear", EmitDefaultValue = false), JsonPropertyName("completedRocketNear")]
    public bool CompletedRocketNear { get; set; } = completedRocketNear;

    /// <summary>
    /// Gets or Sets EndgameRobot1
    /// </summary>
    [DataMember(Name = "endgameRobot1", EmitDefaultValue = false), JsonPropertyName("endgameRobot1")]
    public string EndgameRobot1 { get; set; } = endgameRobot1;

    /// <summary>
    /// Gets or Sets EndgameRobot2
    /// </summary>
    [DataMember(Name = "endgameRobot2", EmitDefaultValue = false), JsonPropertyName("endgameRobot2")]
    public string EndgameRobot2 { get; set; } = endgameRobot2;

    /// <summary>
    /// Gets or Sets EndgameRobot3
    /// </summary>
    [DataMember(Name = "endgameRobot3", EmitDefaultValue = false), JsonPropertyName("endgameRobot3")]
    public string EndgameRobot3 { get; set; } = endgameRobot3;

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>
    [DataMember(Name = "foulCount", EmitDefaultValue = false), JsonPropertyName("foulCount")]
    public int FoulCount { get; set; } = foulCount;

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>
    [DataMember(Name = "foulPoints", EmitDefaultValue = false), JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; } = foulPoints;

    /// <summary>
    /// Gets or Sets HabClimbPoints
    /// </summary>
    [DataMember(Name = "habClimbPoints", EmitDefaultValue = false), JsonPropertyName("habClimbPoints")]
    public int HabClimbPoints { get; set; } = habClimbPoints;

    /// <summary>
    /// Gets or Sets HabDockingRankingPoint
    /// </summary>
    [DataMember(Name = "habDockingRankingPoint", EmitDefaultValue = false), JsonPropertyName("habDockingRankingPoint")]
    public bool HabDockingRankingPoint { get; set; } = habDockingRankingPoint;

    /// <summary>
    /// Gets or Sets HabLineRobot1
    /// </summary>
    [DataMember(Name = "habLineRobot1", EmitDefaultValue = false), JsonPropertyName("habLineRobot1")]
    public string HabLineRobot1 { get; set; } = habLineRobot1;

    /// <summary>
    /// Gets or Sets HabLineRobot2
    /// </summary>
    [DataMember(Name = "habLineRobot2", EmitDefaultValue = false), JsonPropertyName("habLineRobot2")]
    public string HabLineRobot2 { get; set; } = habLineRobot2;

    /// <summary>
    /// Gets or Sets HabLineRobot3
    /// </summary>
    [DataMember(Name = "habLineRobot3", EmitDefaultValue = false), JsonPropertyName("habLineRobot3")]
    public string HabLineRobot3 { get; set; } = habLineRobot3;

    /// <summary>
    /// Gets or Sets HatchPanelPoints
    /// </summary>
    [DataMember(Name = "hatchPanelPoints", EmitDefaultValue = false), JsonPropertyName("hatchPanelPoints")]
    public int HatchPanelPoints { get; set; } = hatchPanelPoints;

    /// <summary>
    /// Gets or Sets LowLeftRocketFar
    /// </summary>
    [DataMember(Name = "lowLeftRocketFar", EmitDefaultValue = false), JsonPropertyName("lowLeftRocketFar")]
    public string LowLeftRocketFar { get; set; } = lowLeftRocketFar;

    /// <summary>
    /// Gets or Sets LowLeftRocketNear
    /// </summary>
    [DataMember(Name = "lowLeftRocketNear", EmitDefaultValue = false), JsonPropertyName("lowLeftRocketNear")]
    public string LowLeftRocketNear { get; set; } = lowLeftRocketNear;

    /// <summary>
    /// Gets or Sets LowRightRocketFar
    /// </summary>
    [DataMember(Name = "lowRightRocketFar", EmitDefaultValue = false), JsonPropertyName("lowRightRocketFar")]
    public string LowRightRocketFar { get; set; } = lowRightRocketFar;

    /// <summary>
    /// Gets or Sets LowRightRocketNear
    /// </summary>
    [DataMember(Name = "lowRightRocketNear", EmitDefaultValue = false), JsonPropertyName("lowRightRocketNear")]
    public string LowRightRocketNear { get; set; } = lowRightRocketNear;

    /// <summary>
    /// Gets or Sets MidLeftRocketFar
    /// </summary>
    [DataMember(Name = "midLeftRocketFar", EmitDefaultValue = false), JsonPropertyName("midLeftRocketFar")]
    public string MidLeftRocketFar { get; set; } = midLeftRocketFar;

    /// <summary>
    /// Gets or Sets MidLeftRocketNear
    /// </summary>
    [DataMember(Name = "midLeftRocketNear", EmitDefaultValue = false), JsonPropertyName("midLeftRocketNear")]
    public string MidLeftRocketNear { get; set; } = midLeftRocketNear;

    /// <summary>
    /// Gets or Sets MidRightRocketFar
    /// </summary>
    [DataMember(Name = "midRightRocketFar", EmitDefaultValue = false), JsonPropertyName("midRightRocketFar")]
    public string MidRightRocketFar { get; set; } = midRightRocketFar;

    /// <summary>
    /// Gets or Sets MidRightRocketNear
    /// </summary>
    [DataMember(Name = "midRightRocketNear", EmitDefaultValue = false), JsonPropertyName("midRightRocketNear")]
    public string MidRightRocketNear { get; set; } = midRightRocketNear;

    /// <summary>
    /// Gets or Sets PreMatchBay1
    /// </summary>
    [DataMember(Name = "preMatchBay1", EmitDefaultValue = false), JsonPropertyName("preMatchBay1")]
    public string PreMatchBay1 { get; set; } = preMatchBay1;

    /// <summary>
    /// Gets or Sets PreMatchBay2
    /// </summary>
    [DataMember(Name = "preMatchBay2", EmitDefaultValue = false), JsonPropertyName("preMatchBay2")]
    public string PreMatchBay2 { get; set; } = preMatchBay2;

    /// <summary>
    /// Gets or Sets PreMatchBay3
    /// </summary>
    [DataMember(Name = "preMatchBay3", EmitDefaultValue = false), JsonPropertyName("preMatchBay3")]
    public string PreMatchBay3 { get; set; } = preMatchBay3;

    /// <summary>
    /// Gets or Sets PreMatchBay6
    /// </summary>
    [DataMember(Name = "preMatchBay6", EmitDefaultValue = false), JsonPropertyName("preMatchBay6")]
    public string PreMatchBay6 { get; set; } = preMatchBay6;

    /// <summary>
    /// Gets or Sets PreMatchBay7
    /// </summary>
    [DataMember(Name = "preMatchBay7", EmitDefaultValue = false), JsonPropertyName("preMatchBay7")]
    public string PreMatchBay7 { get; set; } = preMatchBay7;

    /// <summary>
    /// Gets or Sets PreMatchBay8
    /// </summary>
    [DataMember(Name = "preMatchBay8", EmitDefaultValue = false), JsonPropertyName("preMatchBay8")]
    public string PreMatchBay8 { get; set; } = preMatchBay8;

    /// <summary>
    /// Gets or Sets PreMatchLevelRobot1
    /// </summary>
    [DataMember(Name = "preMatchLevelRobot1", EmitDefaultValue = false), JsonPropertyName("preMatchLevelRobot1")]
    public string PreMatchLevelRobot1 { get; set; } = preMatchLevelRobot1;

    /// <summary>
    /// Gets or Sets PreMatchLevelRobot2
    /// </summary>
    [DataMember(Name = "preMatchLevelRobot2", EmitDefaultValue = false), JsonPropertyName("preMatchLevelRobot2")]
    public string PreMatchLevelRobot2 { get; set; } = preMatchLevelRobot2;

    /// <summary>
    /// Gets or Sets PreMatchLevelRobot3
    /// </summary>
    [DataMember(Name = "preMatchLevelRobot3", EmitDefaultValue = false), JsonPropertyName("preMatchLevelRobot3")]
    public string PreMatchLevelRobot3 { get; set; } = preMatchLevelRobot3;

    /// <summary>
    /// Gets or Sets Rp
    /// </summary>
    [DataMember(Name = "rp", EmitDefaultValue = false), JsonPropertyName("rp")]
    public int Rp { get; set; } = rp;

    /// <summary>
    /// Gets or Sets SandStormBonusPoints
    /// </summary>
    [DataMember(Name = "sandStormBonusPoints", EmitDefaultValue = false), JsonPropertyName("sandStormBonusPoints")]
    public int SandStormBonusPoints { get; set; } = sandStormBonusPoints;

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>
    [DataMember(Name = "techFoulCount", EmitDefaultValue = false), JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; } = techFoulCount;

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>
    [DataMember(Name = "teleopPoints", EmitDefaultValue = false), JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; } = teleopPoints;

    /// <summary>
    /// Gets or Sets TopLeftRocketFar
    /// </summary>
    [DataMember(Name = "topLeftRocketFar", EmitDefaultValue = false), JsonPropertyName("topLeftRocketFar")]
    public string TopLeftRocketFar { get; set; } = topLeftRocketFar;

    /// <summary>
    /// Gets or Sets TopLeftRocketNear
    /// </summary>
    [DataMember(Name = "topLeftRocketNear", EmitDefaultValue = false), JsonPropertyName("topLeftRocketNear")]
    public string TopLeftRocketNear { get; set; } = topLeftRocketNear;

    /// <summary>
    /// Gets or Sets TopRightRocketFar
    /// </summary>
    [DataMember(Name = "topRightRocketFar", EmitDefaultValue = false), JsonPropertyName("topRightRocketFar")]
    public string TopRightRocketFar { get; set; } = topRightRocketFar;

    /// <summary>
    /// Gets or Sets TopRightRocketNear
    /// </summary>
    [DataMember(Name = "topRightRocketNear", EmitDefaultValue = false), JsonPropertyName("topRightRocketNear")]
    public string TopRightRocketNear { get; set; } = topRightRocketNear;

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>
    [DataMember(Name = "totalPoints", EmitDefaultValue = false), JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; } = totalPoints;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class MatchScoreBreakdown2019Alliance {\n");
        sb.Append("  AdjustPoints: ").Append(this.AdjustPoints).Append('\n');
        sb.Append("  AutoPoints: ").Append(this.AutoPoints).Append('\n');
        sb.Append("  Bay1: ").Append(this.Bay1).Append('\n');
        sb.Append("  Bay2: ").Append(this.Bay2).Append('\n');
        sb.Append("  Bay3: ").Append(this.Bay3).Append('\n');
        sb.Append("  Bay4: ").Append(this.Bay4).Append('\n');
        sb.Append("  Bay5: ").Append(this.Bay5).Append('\n');
        sb.Append("  Bay6: ").Append(this.Bay6).Append('\n');
        sb.Append("  Bay7: ").Append(this.Bay7).Append('\n');
        sb.Append("  Bay8: ").Append(this.Bay8).Append('\n');
        sb.Append("  CargoPoints: ").Append(this.CargoPoints).Append('\n');
        sb.Append("  CompleteRocketRankingPoint: ").Append(this.CompleteRocketRankingPoint).Append('\n');
        sb.Append("  CompletedRocketFar: ").Append(this.CompletedRocketFar).Append('\n');
        sb.Append("  CompletedRocketNear: ").Append(this.CompletedRocketNear).Append('\n');
        sb.Append("  EndgameRobot1: ").Append(this.EndgameRobot1).Append('\n');
        sb.Append("  EndgameRobot2: ").Append(this.EndgameRobot2).Append('\n');
        sb.Append("  EndgameRobot3: ").Append(this.EndgameRobot3).Append('\n');
        sb.Append("  FoulCount: ").Append(this.FoulCount).Append('\n');
        sb.Append("  FoulPoints: ").Append(this.FoulPoints).Append('\n');
        sb.Append("  HabClimbPoints: ").Append(this.HabClimbPoints).Append('\n');
        sb.Append("  HabDockingRankingPoint: ").Append(this.HabDockingRankingPoint).Append('\n');
        sb.Append("  HabLineRobot1: ").Append(this.HabLineRobot1).Append('\n');
        sb.Append("  HabLineRobot2: ").Append(this.HabLineRobot2).Append('\n');
        sb.Append("  HabLineRobot3: ").Append(this.HabLineRobot3).Append('\n');
        sb.Append("  HatchPanelPoints: ").Append(this.HatchPanelPoints).Append('\n');
        sb.Append("  LowLeftRocketFar: ").Append(this.LowLeftRocketFar).Append('\n');
        sb.Append("  LowLeftRocketNear: ").Append(this.LowLeftRocketNear).Append('\n');
        sb.Append("  LowRightRocketFar: ").Append(this.LowRightRocketFar).Append('\n');
        sb.Append("  LowRightRocketNear: ").Append(this.LowRightRocketNear).Append('\n');
        sb.Append("  MidLeftRocketFar: ").Append(this.MidLeftRocketFar).Append('\n');
        sb.Append("  MidLeftRocketNear: ").Append(this.MidLeftRocketNear).Append('\n');
        sb.Append("  MidRightRocketFar: ").Append(this.MidRightRocketFar).Append('\n');
        sb.Append("  MidRightRocketNear: ").Append(this.MidRightRocketNear).Append('\n');
        sb.Append("  PreMatchBay1: ").Append(this.PreMatchBay1).Append('\n');
        sb.Append("  PreMatchBay2: ").Append(this.PreMatchBay2).Append('\n');
        sb.Append("  PreMatchBay3: ").Append(this.PreMatchBay3).Append('\n');
        sb.Append("  PreMatchBay6: ").Append(this.PreMatchBay6).Append('\n');
        sb.Append("  PreMatchBay7: ").Append(this.PreMatchBay7).Append('\n');
        sb.Append("  PreMatchBay8: ").Append(this.PreMatchBay8).Append('\n');
        sb.Append("  PreMatchLevelRobot1: ").Append(this.PreMatchLevelRobot1).Append('\n');
        sb.Append("  PreMatchLevelRobot2: ").Append(this.PreMatchLevelRobot2).Append('\n');
        sb.Append("  PreMatchLevelRobot3: ").Append(this.PreMatchLevelRobot3).Append('\n');
        sb.Append("  Rp: ").Append(this.Rp).Append('\n');
        sb.Append("  SandStormBonusPoints: ").Append(this.SandStormBonusPoints).Append('\n');
        sb.Append("  TechFoulCount: ").Append(this.TechFoulCount).Append('\n');
        sb.Append("  TeleopPoints: ").Append(this.TeleopPoints).Append('\n');
        sb.Append("  TopLeftRocketFar: ").Append(this.TopLeftRocketFar).Append('\n');
        sb.Append("  TopLeftRocketNear: ").Append(this.TopLeftRocketNear).Append('\n');
        sb.Append("  TopRightRocketFar: ").Append(this.TopRightRocketFar).Append('\n');
        sb.Append("  TopRightRocketNear: ").Append(this.TopRightRocketNear).Append('\n');
        sb.Append("  TotalPoints: ").Append(this.TotalPoints).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as MatchScoreBreakdown2019Alliance);

    /// <summary>
    /// Returns true if MatchScoreBreakdown2019Alliance instances are equal
    /// </summary>
    /// <param name="input">Instance of MatchScoreBreakdown2019Alliance to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(MatchScoreBreakdown2019Alliance input)
    {
        return input != null
&& (
                this.AdjustPoints == input.AdjustPoints ||
                this.AdjustPoints.Equals(input.AdjustPoints)
            ) &&
            (
                this.AutoPoints == input.AutoPoints ||
                this.AutoPoints.Equals(input.AutoPoints)
            ) &&
            (
                this.Bay1 == input.Bay1 ||
                (this.Bay1 != null &&
                this.Bay1.Equals(input.Bay1))
            ) &&
            (
                this.Bay2 == input.Bay2 ||
                (this.Bay2 != null &&
                this.Bay2.Equals(input.Bay2))
            ) &&
            (
                this.Bay3 == input.Bay3 ||
                (this.Bay3 != null &&
                this.Bay3.Equals(input.Bay3))
            ) &&
            (
                this.Bay4 == input.Bay4 ||
                (this.Bay4 != null &&
                this.Bay4.Equals(input.Bay4))
            ) &&
            (
                this.Bay5 == input.Bay5 ||
                (this.Bay5 != null &&
                this.Bay5.Equals(input.Bay5))
            ) &&
            (
                this.Bay6 == input.Bay6 ||
                (this.Bay6 != null &&
                this.Bay6.Equals(input.Bay6))
            ) &&
            (
                this.Bay7 == input.Bay7 ||
                (this.Bay7 != null &&
                this.Bay7.Equals(input.Bay7))
            ) &&
            (
                this.Bay8 == input.Bay8 ||
                (this.Bay8 != null &&
                this.Bay8.Equals(input.Bay8))
            ) &&
            (
                this.CargoPoints == input.CargoPoints ||
                this.CargoPoints.Equals(input.CargoPoints)
            ) &&
            (
                this.CompleteRocketRankingPoint == input.CompleteRocketRankingPoint ||
                this.CompleteRocketRankingPoint.Equals(input.CompleteRocketRankingPoint)
            ) &&
            (
                this.CompletedRocketFar == input.CompletedRocketFar ||
                this.CompletedRocketFar.Equals(input.CompletedRocketFar)
            ) &&
            (
                this.CompletedRocketNear == input.CompletedRocketNear ||
                this.CompletedRocketNear.Equals(input.CompletedRocketNear)
            ) &&
            (
                this.EndgameRobot1 == input.EndgameRobot1 ||
                (this.EndgameRobot1 != null &&
                this.EndgameRobot1.Equals(input.EndgameRobot1))
            ) &&
            (
                this.EndgameRobot2 == input.EndgameRobot2 ||
                (this.EndgameRobot2 != null &&
                this.EndgameRobot2.Equals(input.EndgameRobot2))
            ) &&
            (
                this.EndgameRobot3 == input.EndgameRobot3 ||
                (this.EndgameRobot3 != null &&
                this.EndgameRobot3.Equals(input.EndgameRobot3))
            ) &&
            (
                this.FoulCount == input.FoulCount ||
                this.FoulCount.Equals(input.FoulCount)
            ) &&
            (
                this.FoulPoints == input.FoulPoints ||
                this.FoulPoints.Equals(input.FoulPoints)
            ) &&
            (
                this.HabClimbPoints == input.HabClimbPoints ||
                this.HabClimbPoints.Equals(input.HabClimbPoints)
            ) &&
            (
                this.HabDockingRankingPoint == input.HabDockingRankingPoint ||
                this.HabDockingRankingPoint.Equals(input.HabDockingRankingPoint)
            ) &&
            (
                this.HabLineRobot1 == input.HabLineRobot1 ||
                (this.HabLineRobot1 != null &&
                this.HabLineRobot1.Equals(input.HabLineRobot1))
            ) &&
            (
                this.HabLineRobot2 == input.HabLineRobot2 ||
                (this.HabLineRobot2 != null &&
                this.HabLineRobot2.Equals(input.HabLineRobot2))
            ) &&
            (
                this.HabLineRobot3 == input.HabLineRobot3 ||
                (this.HabLineRobot3 != null &&
                this.HabLineRobot3.Equals(input.HabLineRobot3))
            ) &&
            (
                this.HatchPanelPoints == input.HatchPanelPoints ||
                this.HatchPanelPoints.Equals(input.HatchPanelPoints)
            ) &&
            (
                this.LowLeftRocketFar == input.LowLeftRocketFar ||
                (this.LowLeftRocketFar != null &&
                this.LowLeftRocketFar.Equals(input.LowLeftRocketFar))
            ) &&
            (
                this.LowLeftRocketNear == input.LowLeftRocketNear ||
                (this.LowLeftRocketNear != null &&
                this.LowLeftRocketNear.Equals(input.LowLeftRocketNear))
            ) &&
            (
                this.LowRightRocketFar == input.LowRightRocketFar ||
                (this.LowRightRocketFar != null &&
                this.LowRightRocketFar.Equals(input.LowRightRocketFar))
            ) &&
            (
                this.LowRightRocketNear == input.LowRightRocketNear ||
                (this.LowRightRocketNear != null &&
                this.LowRightRocketNear.Equals(input.LowRightRocketNear))
            ) &&
            (
                this.MidLeftRocketFar == input.MidLeftRocketFar ||
                (this.MidLeftRocketFar != null &&
                this.MidLeftRocketFar.Equals(input.MidLeftRocketFar))
            ) &&
            (
                this.MidLeftRocketNear == input.MidLeftRocketNear ||
                (this.MidLeftRocketNear != null &&
                this.MidLeftRocketNear.Equals(input.MidLeftRocketNear))
            ) &&
            (
                this.MidRightRocketFar == input.MidRightRocketFar ||
                (this.MidRightRocketFar != null &&
                this.MidRightRocketFar.Equals(input.MidRightRocketFar))
            ) &&
            (
                this.MidRightRocketNear == input.MidRightRocketNear ||
                (this.MidRightRocketNear != null &&
                this.MidRightRocketNear.Equals(input.MidRightRocketNear))
            ) &&
            (
                this.PreMatchBay1 == input.PreMatchBay1 ||
                (this.PreMatchBay1 != null &&
                this.PreMatchBay1.Equals(input.PreMatchBay1))
            ) &&
            (
                this.PreMatchBay2 == input.PreMatchBay2 ||
                (this.PreMatchBay2 != null &&
                this.PreMatchBay2.Equals(input.PreMatchBay2))
            ) &&
            (
                this.PreMatchBay3 == input.PreMatchBay3 ||
                (this.PreMatchBay3 != null &&
                this.PreMatchBay3.Equals(input.PreMatchBay3))
            ) &&
            (
                this.PreMatchBay6 == input.PreMatchBay6 ||
                (this.PreMatchBay6 != null &&
                this.PreMatchBay6.Equals(input.PreMatchBay6))
            ) &&
            (
                this.PreMatchBay7 == input.PreMatchBay7 ||
                (this.PreMatchBay7 != null &&
                this.PreMatchBay7.Equals(input.PreMatchBay7))
            ) &&
            (
                this.PreMatchBay8 == input.PreMatchBay8 ||
                (this.PreMatchBay8 != null &&
                this.PreMatchBay8.Equals(input.PreMatchBay8))
            ) &&
            (
                this.PreMatchLevelRobot1 == input.PreMatchLevelRobot1 ||
                (this.PreMatchLevelRobot1 != null &&
                this.PreMatchLevelRobot1.Equals(input.PreMatchLevelRobot1))
            ) &&
            (
                this.PreMatchLevelRobot2 == input.PreMatchLevelRobot2 ||
                (this.PreMatchLevelRobot2 != null &&
                this.PreMatchLevelRobot2.Equals(input.PreMatchLevelRobot2))
            ) &&
            (
                this.PreMatchLevelRobot3 == input.PreMatchLevelRobot3 ||
                (this.PreMatchLevelRobot3 != null &&
                this.PreMatchLevelRobot3.Equals(input.PreMatchLevelRobot3))
            ) &&
            (
                this.Rp == input.Rp ||
                this.Rp.Equals(input.Rp)
            ) &&
            (
                this.SandStormBonusPoints == input.SandStormBonusPoints ||
                this.SandStormBonusPoints.Equals(input.SandStormBonusPoints)
            ) &&
            (
                this.TechFoulCount == input.TechFoulCount ||
                this.TechFoulCount.Equals(input.TechFoulCount)
            ) &&
            (
                this.TeleopPoints == input.TeleopPoints ||
                this.TeleopPoints.Equals(input.TeleopPoints)
            ) &&
            (
                this.TopLeftRocketFar == input.TopLeftRocketFar ||
                (this.TopLeftRocketFar != null &&
                this.TopLeftRocketFar.Equals(input.TopLeftRocketFar))
            ) &&
            (
                this.TopLeftRocketNear == input.TopLeftRocketNear ||
                (this.TopLeftRocketNear != null &&
                this.TopLeftRocketNear.Equals(input.TopLeftRocketNear))
            ) &&
            (
                this.TopRightRocketFar == input.TopRightRocketFar ||
                (this.TopRightRocketFar != null &&
                this.TopRightRocketFar.Equals(input.TopRightRocketFar))
            ) &&
            (
                this.TopRightRocketNear == input.TopRightRocketNear ||
                (this.TopRightRocketNear != null &&
                this.TopRightRocketNear.Equals(input.TopRightRocketNear))
            ) &&
            (
                this.TotalPoints == input.TotalPoints ||
                this.TotalPoints.Equals(input.TotalPoints)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.AdjustPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoPoints.GetHashCode();
            if (this.Bay1 != null)
            {
                hashCode = (hashCode * 59) + this.Bay1.GetHashCode();
            }

            if (this.Bay2 != null)
            {
                hashCode = (hashCode * 59) + this.Bay2.GetHashCode();
            }

            if (this.Bay3 != null)
            {
                hashCode = (hashCode * 59) + this.Bay3.GetHashCode();
            }

            if (this.Bay4 != null)
            {
                hashCode = (hashCode * 59) + this.Bay4.GetHashCode();
            }

            if (this.Bay5 != null)
            {
                hashCode = (hashCode * 59) + this.Bay5.GetHashCode();
            }

            if (this.Bay6 != null)
            {
                hashCode = (hashCode * 59) + this.Bay6.GetHashCode();
            }

            if (this.Bay7 != null)
            {
                hashCode = (hashCode * 59) + this.Bay7.GetHashCode();
            }

            if (this.Bay8 != null)
            {
                hashCode = (hashCode * 59) + this.Bay8.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.CargoPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.CompleteRocketRankingPoint.GetHashCode();
            hashCode = (hashCode * 59) + this.CompletedRocketFar.GetHashCode();
            hashCode = (hashCode * 59) + this.CompletedRocketNear.GetHashCode();
            if (this.EndgameRobot1 != null)
            {
                hashCode = (hashCode * 59) + this.EndgameRobot1.GetHashCode();
            }

            if (this.EndgameRobot2 != null)
            {
                hashCode = (hashCode * 59) + this.EndgameRobot2.GetHashCode();
            }

            if (this.EndgameRobot3 != null)
            {
                hashCode = (hashCode * 59) + this.EndgameRobot3.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.FoulCount.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.HabClimbPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.HabDockingRankingPoint.GetHashCode();
            if (this.HabLineRobot1 != null)
            {
                hashCode = (hashCode * 59) + this.HabLineRobot1.GetHashCode();
            }

            if (this.HabLineRobot2 != null)
            {
                hashCode = (hashCode * 59) + this.HabLineRobot2.GetHashCode();
            }

            if (this.HabLineRobot3 != null)
            {
                hashCode = (hashCode * 59) + this.HabLineRobot3.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.HatchPanelPoints.GetHashCode();
            if (this.LowLeftRocketFar != null)
            {
                hashCode = (hashCode * 59) + this.LowLeftRocketFar.GetHashCode();
            }

            if (this.LowLeftRocketNear != null)
            {
                hashCode = (hashCode * 59) + this.LowLeftRocketNear.GetHashCode();
            }

            if (this.LowRightRocketFar != null)
            {
                hashCode = (hashCode * 59) + this.LowRightRocketFar.GetHashCode();
            }

            if (this.LowRightRocketNear != null)
            {
                hashCode = (hashCode * 59) + this.LowRightRocketNear.GetHashCode();
            }

            if (this.MidLeftRocketFar != null)
            {
                hashCode = (hashCode * 59) + this.MidLeftRocketFar.GetHashCode();
            }

            if (this.MidLeftRocketNear != null)
            {
                hashCode = (hashCode * 59) + this.MidLeftRocketNear.GetHashCode();
            }

            if (this.MidRightRocketFar != null)
            {
                hashCode = (hashCode * 59) + this.MidRightRocketFar.GetHashCode();
            }

            if (this.MidRightRocketNear != null)
            {
                hashCode = (hashCode * 59) + this.MidRightRocketNear.GetHashCode();
            }

            if (this.PreMatchBay1 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchBay1.GetHashCode();
            }

            if (this.PreMatchBay2 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchBay2.GetHashCode();
            }

            if (this.PreMatchBay3 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchBay3.GetHashCode();
            }

            if (this.PreMatchBay6 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchBay6.GetHashCode();
            }

            if (this.PreMatchBay7 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchBay7.GetHashCode();
            }

            if (this.PreMatchBay8 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchBay8.GetHashCode();
            }

            if (this.PreMatchLevelRobot1 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchLevelRobot1.GetHashCode();
            }

            if (this.PreMatchLevelRobot2 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchLevelRobot2.GetHashCode();
            }

            if (this.PreMatchLevelRobot3 != null)
            {
                hashCode = (hashCode * 59) + this.PreMatchLevelRobot3.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.Rp.GetHashCode();
            hashCode = (hashCode * 59) + this.SandStormBonusPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TechFoulCount.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopPoints.GetHashCode();
            if (this.TopLeftRocketFar != null)
            {
                hashCode = (hashCode * 59) + this.TopLeftRocketFar.GetHashCode();
            }

            if (this.TopLeftRocketNear != null)
            {
                hashCode = (hashCode * 59) + this.TopLeftRocketNear.GetHashCode();
            }

            if (this.TopRightRocketFar != null)
            {
                hashCode = (hashCode * 59) + this.TopRightRocketFar.GetHashCode();
            }

            if (this.TopRightRocketNear != null)
            {
                hashCode = (hashCode * 59) + this.TopRightRocketNear.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.TotalPoints.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
