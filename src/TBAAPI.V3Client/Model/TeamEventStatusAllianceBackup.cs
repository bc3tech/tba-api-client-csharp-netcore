/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// Backup status, may be null.
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="TeamEventStatusAllianceBackup" /> class.
/// </remarks>
/// <param name="_out">TBA key for the team replaced by the backup..</param>
/// <param name="_in">TBA key for the backup team called in..</param>
[DataContract]
public partial class TeamEventStatusAllianceBackup(string? _out = default, string? _in = default) : IEquatable<TeamEventStatusAllianceBackup>, IValidatableObject
{

    /// <summary>
    /// TBA key for the team replaced by the backup.
    /// </summary>
    /// <value>TBA key for the team replaced by the backup.</value>
    [DataMember(Name = "out", EmitDefaultValue = false), JsonPropertyName("out")]
    public string? Out { get; set; } = _out;

    /// <summary>
    /// TBA key for the backup team called in.
    /// </summary>
    /// <value>TBA key for the backup team called in.</value>
    [DataMember(Name = "in", EmitDefaultValue = false), JsonPropertyName("in")]
    public string? In { get; set; } = _in;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TeamEventStatusAllianceBackup {\n");
        sb.Append("  Out: ").Append(this.Out).Append('\n');
        sb.Append("  In: ").Append(this.In).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object? input) => Equals(input as TeamEventStatusAllianceBackup);

    /// <summary>
    /// Returns true if TeamEventStatusAllianceBackup instances are equal
    /// </summary>
    /// <param name="input">Instance of TeamEventStatusAllianceBackup to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TeamEventStatusAllianceBackup? input)
    {
        return input is not null &&
            (
                this.Out == input.Out ||
                (this.Out is not null &&
                this.Out.Equals(input.Out))
            ) &&
            (
                this.In == input.In ||
                (this.In is not null &&
                this.In.Equals(input.In))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.Out is not null)
            {
                hashCode = (hashCode * 59) + this.Out.GetHashCode();
            }

            if (this.In is not null)
            {
                hashCode = (hashCode * 59) + this.In.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
